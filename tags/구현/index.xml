<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>구현 on Jxun-h Dev Log</title>
    <link>https://jxun-h.github.io/tags/%EA%B5%AC%ED%98%84/</link>
    <description>Recent content in 구현 on Jxun-h Dev Log</description>
    <image>
      <title>Jxun-h Dev Log</title>
      <url>https://jxun-h.github.io/images/papermod-cover.png</url>
      <link>https://jxun-h.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Jun 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jxun-h.github.io/tags/%EA%B5%AC%ED%98%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[BOJ] 14890 경사로 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-14890-%EA%B2%BD%EC%82%AC%EB%A1%9C-with-python/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-14890-%EA%B2%BD%EC%82%AC%EB%A1%9C-with-python/</guid>
      <description>📌 BOJ 14890 경사로 💡 조건 크기가 N×N인 지도가 있다. 지도의 각 칸에는 그 곳의 높이가 적혀져 있다.
오늘은 이 지도에서 지나갈 수 있는 길이 몇 개 있는지 알아보려고 한다.
길이란 한 행 또는 한 열 전부를 나타내며, 한쪽 끝에서 다른쪽 끝까지 지나가는 것이다.
길을 지나갈 수 있으려면 길에 속한 모든 칸의 높이가 모두 같아야 한다.
또는, 경사로를 놓아서 지나갈 수 있는 길을 만들 수 있다.
경사로는 높이가 항상 1이며, 길이는 L이다.</description>
    </item>
    <item>
      <title>[BOJ] 9996 한국이 그리울 땐 서버에 접속하지 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-9996-%ED%95%9C%EA%B5%AD%EC%9D%B4-%EA%B7%B8%EB%A6%AC%EC%9A%B8-%EB%95%90-%EC%84%9C%EB%B2%84%EC%97%90-%EC%A0%91%EC%86%8D%ED%95%98%EC%A7%80-with-python/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-9996-%ED%95%9C%EA%B5%AD%EC%9D%B4-%EA%B7%B8%EB%A6%AC%EC%9A%B8-%EB%95%90-%EC%84%9C%EB%B2%84%EC%97%90-%EC%A0%91%EC%86%8D%ED%95%98%EC%A7%80-with-python/</guid>
      <description>📌 BOJ 9996 한국이 그리울 땐 서버에 접속하지 💡 조건 선영이는 한국에 두고온 서버에 접속해서 디렉토리 안에 들어있는 파일 이름을 보면서 그리움을 잊기로 했다.
매일 밤, 파일 이름을 보면서 파일 하나하나에 얽힌 사연을 기억하면서 한국을 생각하고 있었다.
한국에 있는 서버가 망가졌고, 그 결과 특정 패턴과 일치하는 파일 이름을 적절히 출력하지 못하는 버그가 생겼다.
패턴은 알파벳 소문자 여러 개와 별표(*) 하나로 이루어진 문자열이다.
파일 이름이 패턴에 일치하려면, 패턴에 있는 별표를 알파벳 소문자로 이루어진 임의의 문자열로 변환해 파일 이름과 같게 만들 수 있어야 한다.</description>
    </item>
    <item>
      <title>[BOJ] 14499 주사위 굴리기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-14499-%EC%A3%BC%EC%82%AC%EC%9C%84-%EA%B5%B4%EB%A6%AC%EA%B8%B0-with-python/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-14499-%EC%A3%BC%EC%82%AC%EC%9C%84-%EA%B5%B4%EB%A6%AC%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 14499 주사위 굴리기 💡 조건 크기가 N×M인 지도가 존재한다. 지도의 오른쪽은 동쪽, 위쪽은 북쪽이다.
이 지도의 위에 주사위가 하나 놓여져 있으며, 주사위의 전개도는 아래와 같다.
지도의 좌표는 (r, c)로 나타내며, r는 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로부터 떨어진 칸의 개수이다. 주사위는 지도 위에 윗 면이 1이고, 동쪽을 바라보는 방향이 3인 상태로 놓여져 있으며,
놓여져 있는 곳의 좌표는 (x, y) 이다. 가장 처음에 주사위에는 모든 면에 0이 적혀져 있다.</description>
    </item>
    <item>
      <title>[BOJ] 20438 출석체크 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-20438-%EC%B6%9C%EC%84%9D%EC%B2%B4%ED%81%AC-with-python/</link>
      <pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-20438-%EC%B6%9C%EC%84%9D%EC%B2%B4%ED%81%AC-with-python/</guid>
      <description>📌 BOJ 20438 출석체크 💡 조건 학생들은 접속 순서대로 3번부터 N + 2번까지 입장 번호를 받게 된다.
지환이가 한 학생에게 출석 코드를 보내게 되면, 해당 학생은 본인의 입장 번호의 배수인 학생들에게 출석 코드를 보내어
해당 강의의 출석을 할 수 있게끔 한다. 하지만, K명의 졸고 있는 학생들은 출석 코드를 제출하지 않고, 다른 학생들에게 보내지 않는다.
지환이는 무작위로 한 명의 학생에게 출석 코드를 보내는 행위를 Q번 반복한 뒤,
출석부 정리를 위해 특정 구간의 입장 번호를 받은 학생들 중에서 출석이 되지 않은 학생들의 수를 구하고 싶다.</description>
    </item>
    <item>
      <title>[BOJ] 20436 ZOAC 3 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-20436-zoac-3-with-python/</link>
      <pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-20436-zoac-3-with-python/</guid>
      <description>📌 BOJ 20436 ZOAC 3 💡 조건 독수리 타법이란 양 손의 검지손가락만을 이용해 타자를 치는 타법이다.
성우는 한글 자음 쪽 자판은 왼손 검지손가락으로 입력하고, 한글 모음 쪽 자판은 오른손 검지손가락으로 입력한다. a의 좌표가 (x1, y1)이고, b의 좌표가 (x2, y2)일 때,
a에 위치한 성우의 손가락이 b로 이동하는 데에는 a와 b의 택시 거리 |x1-x2|+|y1-y2| 만큼의 시간이 걸린다. 각 키를 누르는 데에는 1의 시간이 걸린다. 성우는 두 손을 동시에 움직일 수 없다.</description>
    </item>
    <item>
      <title>[BOJ] 20114 미아 노트 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-20114-%EB%AF%B8%EC%95%84-%EB%85%B8%ED%8A%B8-with-python/</link>
      <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-20114-%EB%AF%B8%EC%95%84-%EB%85%B8%ED%8A%B8-with-python/</guid>
      <description>📌 BOJ 20114 미아 노트 💡 조건 노트에 적힌 문자열이 번진 패턴은 일정했는데, 가령 &amp;ldquo;abc&amp;rdquo; 문자가 세로로 3글자씩, 가로로 2글자씩 번진 경우는 다음과 같았다. 아쉽게도 번진 문자열의 일부는 지워진 상태였다.
너무 많이 지워져버려서 해당 자리의 문자를 유추할 수 없는 경우, 완전히 문자열을 복원하지 못할 수도 있다. 첫째 줄에 원래 문자열의 길이 N, 세로로 번진 글자의 개수 H, 가로로 번진 글자의 개수 W가 주어진다.
(1 ≤ N ≤ 100, 1 ≤ H ≤ 10, 1 ≤ W ≤ 10) H개의 줄에 걸쳐 N × W 길이의 문자열이 주어진다.</description>
    </item>
    <item>
      <title>[BOJ] 20125 쿠키의 신체 측정 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-20125-%EC%BF%A0%ED%82%A4%EC%9D%98-%EC%8B%A0%EC%B2%B4-%EC%B8%A1%EC%A0%95-with-python/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-20125-%EC%BF%A0%ED%82%A4%EC%9D%98-%EC%8B%A0%EC%B2%B4-%EC%B8%A1%EC%A0%95-with-python/</guid>
      <description>📌 BOJ 20125 쿠키의 신체 측정 💡 조건 쿠키들은 신체를 측정하기 위해서 한 변의 길이가 N인 정사각형 판 위에 누워있으며, 어느 신체 부위도 판 밖으로 벗어나지 않는다. 판의 x번째 행, y번째 열에 위치한 곳을 (x, y)로 지칭한다. 판의 맨 왼쪽 위 칸을 (1, 1), 오른쪽 아래 칸을 (N, N)으로 나타낼 수 있다. 쿠키의 신체는 머리, 심장, 허리, 그리고 좌우 팔, 다리로 구성되어 있다. 그림에서 빨간 곳으로 칠해진 부분이 심장이다. 머리는 심장 바로 윗 칸에 1칸 크기로 있다.</description>
    </item>
    <item>
      <title>[BOJ] 14696 딱지놀이 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-14696-%EB%94%B1%EC%A7%80%EB%86%80%EC%9D%B4-with-python/</link>
      <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-14696-%EB%94%B1%EC%A7%80%EB%86%80%EC%9D%B4-with-python/</guid>
      <description>📌 BOJ 14696 딱지놀이 💡 조건 4, 3, 2, 1 에 해당하는 숫자가 각 몇 개인지 파악하여 승자가 누구인지 출력하는 문제 서브태크스가 존재한다. 출력의 i번째 (1 ≤ i ≤ N) 줄에 정확히 한 글자를 출력하는데, 출력하는 글자는 A, B, D 중 하나로 라운드 i의 결과를 나타낸다. 각 라운드의 결과는 A가 승자라면 A, B가 승자라면 B, 무승부라면 D이다. 구현 유형의 문제 🔖 예제 및 실행결과 예제 5 1 4 4 3 3 2 1 5 2 4 3 2 1 4 4 3 3 1 4 3 2 1 1 4 2 3 2 1 4 4 3 2 1 3 4 3 2 5 4 4 2 3 1 5 4 2 4 1 3 실행결과 A B B A D 🖥 소스 코드 from sys import stdin for _ in range(int(stdin.</description>
    </item>
    <item>
      <title>[BOJ] 16926 배열 돌리기 1 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-16926-%EB%B0%B0%EC%97%B4-%EB%8F%8C%EB%A6%AC%EA%B8%B0-1-with-python/</link>
      <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-16926-%EB%B0%B0%EC%97%B4-%EB%8F%8C%EB%A6%AC%EA%B8%B0-1-with-python/</guid>
      <description>📌 BOJ 16926 배열 돌리기 1 💡 조건 크기가 N×M인 배열이 있을 때, 배열을 반시계 방향으로 돌린다. 첫째 줄에 배열의 크기 N, M과 수행해야 하는 회전의 수 R이 주어진다.
둘째 줄부터 N개의 줄에 배열 A의 원소 Aij가 주어진다. 2 ≤ N, M ≤ 300
1 ≤ R ≤ 1,000
min(N, M) mod 2 = 0
1 ≤ Aij ≤ 108 배열을 R번 회전시킨 결과를 출력하는 문제 구현 유형의 문제 🔖 예제 및 실행결과 예제 5 4 7 1 2 3 4 7 8 9 10 13 14 15 16 19 20 21 22 25 26 27 28 실행결과 28 27 26 25 22 9 15 19 16 8 21 13 10 14 20 7 4 3 2 1 🖥 소스 코드 from sys import stdin n, m, r = map(int, stdin.</description>
    </item>
    <item>
      <title>[BOJ] 8911 거북이 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-8911-%EA%B1%B0%EB%B6%81%EC%9D%B4-with-python/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-8911-%EA%B1%B0%EB%B6%81%EC%9D%B4-with-python/</guid>
      <description>📌 BOJ 8911 거북이 💡 조건 2차원 평면 위에서 움직일 수 있는 거북이 로봇을 하나 가지고 있다. 거북이 로봇에게 내릴 수 있는 명령은 다음과 같이 네가지가 있다.
F: 한 눈금 앞으로
B: 한 눈금 뒤로
L: 왼쪽으로 90도 회전
R: 오른쪽으로 90도 회전 L과 R명령을 내렸을 때, 로봇은 이동하지 않고, 방향만 바꾼다.
거북이는 항상 x축과 y축에 평행한 방향으로만 이동한다. 거북이가 지나간 영역을 모두 포함할 수 있는 가장 작은 직사각형의 넓이를 구하는 문제.</description>
    </item>
    <item>
      <title>[BOJ] 8974 희주의 수학시험 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-8974-%ED%9D%AC%EC%A3%BC%EC%9D%98-%EC%88%98%ED%95%99%EC%8B%9C%ED%97%98-with-python/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-8974-%ED%9D%AC%EC%A3%BC%EC%9D%98-%EC%88%98%ED%95%99%EC%8B%9C%ED%97%98-with-python/</guid>
      <description>📌 BOJ 8974 희주의 수학시험 💡 조건 연습문제 중에 하나가 정수를 적어나가는 것이였는데 수열은 1이 한 개, 2가 두 개, 3이 세 개.. 와 같이 만들어진다. 이제 강민이는 희주에게 두 개의 정수 A, B를 부를텐데, 그럼 희주는 주어진 수열에서 A번째와 B번째 사이에 있는 모든 수들의 합을 말해야한다. 희주에게 문제를 내기 위해 정답을 계산하는 문제 사칙연산, 구현 유형의 문제 🔖 예제 및 실행결과 예제 3 7 실행결과 15 ⌨️ 문제 풀이 반복문을 50회 순회하면서, 각 숫자에 해당하는만큼 리스트에 숫자를 append()한다.</description>
    </item>
    <item>
      <title>[BOJ] 1531 투명 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1531-%ED%88%AC%EB%AA%85-with-python/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1531-%ED%88%AC%EB%AA%85-with-python/</guid>
      <description>📌 BOJ 1531 투명 💡 조건 세준이는 1×1크기의 그림으로 모자이크한 100×100크기의 그림을 가지고 있다. 어느 날 이 모자이크 중 일부 그림이 너무 보기 싫어서 N개의 불투명한 종이로 그림을 가리기 시작했다. 그림의 현재 부분 위에 M개 이하의 종이가 올려져 있으면 그림은 그 부분에서 보이게 된다. N은 0보다 크거나 같고, 50보다 작거나 같다. M은 0보다 크거나 같고, 50보다 작거나 같다. 왼쪽 아래 모서리의 x, y좌표, 오른쪽 위 모서리의 x, y좌표 순으로 주어진다.</description>
    </item>
    <item>
      <title>[BOJ] 10163 색종이 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-10163-%EC%83%89%EC%A2%85%EC%9D%B4-with-python/</link>
      <pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-10163-%EC%83%89%EC%A2%85%EC%9D%B4-with-python/</guid>
      <description>📌 BOJ 10163 색종이 💡 조건 평면에 색깔이 서로 다른 직사각형 모양의 색종이 N장이 하나씩 차례로 놓여진다. 이때 색종이가 비스듬하게 놓이는 경우는 없다. 색종이의 장수를 나타내는 정수 N (1 ≤ N ≤ 100) N장의 색종이가 주어진 위치에 차례로 놓일 경우, 각 색종이가 보이는 부분의 면적을 구하는 문제 가로 최대 1001칸, 세로 최대 1001칸으로 구성된 격자 모양이다.
격자의 각 칸은 가로, 세로 길이가 1인 면적이 1인 정사각형 색종이가 놓인 상태는 가장 왼쪽 아래 칸의 번호와 너비, 높이를 나타내는 네 정수로 표현한다.</description>
    </item>
    <item>
      <title>[BOJ] 9081 단어 맞추기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-9081-%EB%8B%A8%EC%96%B4-%EB%A7%9E%EC%B6%94%EA%B8%B0-with-python/</link>
      <pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-9081-%EB%8B%A8%EC%96%B4-%EB%A7%9E%EC%B6%94%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 9081 단어 맞추기 💡 조건 단어를 주면 그 단어를 이루는 알파벳들로 만들 수 있는 단어들을 사전 순으로 정렬할 때에
주어진 단어 다음에 나오는 단어를 찾는 프로그램을 작성하는 문제 케이스의 개수 T (1 ≤ T ≤ 10) 단어는 알파벳 A~Z 대문자로만 이루어지며 항상 공백이 없는 연속된 알파벳으로 이루어진다.
단어의 길이는 100을 넘지 않는다. 구현 유형의 문제 🖥 소스 코드 from sys import stdin for t in range(int(stdin.readline())): string = list(stdin.</description>
    </item>
    <item>
      <title>[BOJ] 16935 배열 돌리기 3 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-16935-%EB%B0%B0%EC%97%B4-%EB%8F%8C%EB%A6%AC%EA%B8%B0-3-with-python/</link>
      <pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-16935-%EB%B0%B0%EC%97%B4-%EB%8F%8C%EB%A6%AC%EA%B8%B0-3-with-python/</guid>
      <description>📌 BOJ 16935 배열 돌리기 3 💡 조건 크기가 N×M인 배열이 있을 때, 배열에 연산을 R번 적용하려고 한다.
1번 연산은 배열을 상하 반전시키는 연산이다.
2번 연산은 배열을 좌우 반전시키는 연산이다.
3번 연산은 오른쪽으로 90도 회전시키는 연산이다.
4번 연산은 왼쪽으로 90도 회전시키는 연산이다.
5, 6번은 문제 참고 첫째 줄에 배열의 크기 N, M과 수행해야 하는 연산의 수 R이 주어진다.
2 ≤ N, M ≤ 100, N, M은 짝수
1 ≤ R ≤ 1,000 둘째 줄부터 N개의 줄에 배열 A의 원소 Aij가 주어진다.</description>
    </item>
    <item>
      <title>[BOJ] 10384 팬그램 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-10384-%ED%8C%AC%EA%B7%B8%EB%9E%A8-with-python/</link>
      <pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-10384-%ED%8C%AC%EA%B7%B8%EB%9E%A8-with-python/</guid>
      <description>📌 BOJ 10384 팬그램 💡 조건 팬그램은 모든 알파벳을 적어도 한 번씩을 사용한 영어 문장을 말한다. 더블 팬그램은 모든 알파벳을 적어도 두 번씩은 사용한 문장을 말하고, 트리플 팬그램은 모든 알파벳을 적어도 세 번씩은 사용한 문장을 말한다. 입력은 여러 줄의 테스트케이스들로 이루어진다.
첫째 줄에 테스트케이스의 수 n이 주어진다.
각 테스트케이스는 영어 소문자와 대문자, 특수기호들로 이루어진다. 팬그램이 아닐 경우 - Not a pangram
팬그램일 경우 - Pangram!
더블 팬그램일 경우 - Double pangram!</description>
    </item>
    <item>
      <title>[BOJ] 1855 암호 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1855-%EC%95%94%ED%98%B8-with-python/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1855-%EC%95%94%ED%98%B8-with-python/</guid>
      <description>📌 BOJ 1855 암호 💡 조건 먼저 암호화 할 문자열을 1,1부터 위에서 아래 순서대로 채운다. 그리고 가장 밑의 행을 채운 후에는 오른쪽 열에서 다시 같은 과정을 반복한다. 암호화 된 문자열과 몇 개의 열로 암호화를 하였는지 주어져 있을 때 원래의 문자열을 구하는 프로그램을 작성하는 문제. 열의 개수 K(1 ≤ K ≤ 20)가 주어진다.
두 번째 줄에는 암호화 된 문자열(모두 영소문자)이 주어진다. (문자열의 길이는 200 이하이며 K의 배수이다.) 구현, 문자열 유형의 문제 🔖 예제 및 실행결과 예제 3 aeijfbcgklhd 실행결과 abcdefghijkl ⌨️ 문제 풀이 열의 개수와 문자열을 입력받고, 열의 개수에 맞게 문자열을 쪼개서 arr 리스트에 저장한다.</description>
    </item>
    <item>
      <title>[BOJ] 2697 다음수 구하기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-2697-%EB%8B%A4%EC%9D%8C%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0-with-python/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-2697-%EB%8B%A4%EC%9D%8C%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 2697 다음수 구하기 💡 조건 A의 다음수는 A와 구성이 같으면서, A보다 큰 수 중에서 가장 작은 수. A와 B의 구성이 같다는 말은 A를 이루고 있는 각 자리수의 등장 횟수가, B를 이루는 각 자리수의 등장 횟수와 같을 때. 첫째 줄에 테스트 케이스의 개수 T(1&amp;lt;=T&amp;lt;=1,000)가 주어진다.
둘째 줄부터 T개 줄에는 각 테스트 케이스가 주어진다. 테스트 케이스는 한 줄로 이루어져 있으며, 수 A이다. A는 최대 80자리 자연수이다. 어떤 수 A가 주어졌을 때, A의 다음수를 구하는 프로그램을 작성하는 문제.</description>
    </item>
    <item>
      <title>[BOJ] 2477 참외밭 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-2477-%EC%B0%B8%EC%99%B8%EB%B0%AD-with-python/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-2477-%EC%B0%B8%EC%99%B8%EB%B0%AD-with-python/</guid>
      <description>📌 BOJ 2477 참외밭 💡 조건 m2의 넓이에 자라는 참외의 개수를 나타내는 양의 정수 K (1 ≤ K ≤ 20) 참외밭을 나타내는 육각형의 임의의 한 꼭짓점에서 출발하여
반시계방향으로 둘레를 돌면서 지나는 변의 방향과 길이 (1 이상 500 이하의 정수) 변의 방향에서 동쪽은 1, 서쪽은 2, 남쪽은 3, 북쪽은 4로 나타낸다. 참외밭은 ㄱ-자 모양이거나 ㄱ-자를 90도, 180도, 270도 회전한 모양(┏, ┗, ┛ 모양)의 육각형이다. 구현 유형의 문제 🔖 예제 및 실행결과 예제 7 4 50 2 160 3 30 1 60 3 20 1 100 실행결과 47600 ⌨️ 문제 풀이 6개의 방향과 변의 길이를 각각 direction, length 라는 변수에 입력받는다</description>
    </item>
    <item>
      <title>[BOJ] 11655 ROT13 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-11655-rot13-with-python/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-11655-rot13-with-python/</guid>
      <description>📌 BOJ 11655 ROT13 💡 조건 ROT13은 카이사르 암호의 일종으로 영어 알파벳을 13글자씩 밀어서 만든다.
&amp;ldquo;Baekjoon Online Judge&amp;quot;를 ROT13으로 암호화하면 &amp;ldquo;Onrxwbba Bayvar Whqtr&amp;quot;가 된다.
ROT13으로 암호화한 내용을 원래 내용으로 바꾸려면 암호화한 문자열을 다시 ROT13하면 된다. S를 ROT13으로 암호화한 내용을 출력하는 문제 구현, 문자열유형의 문제 🔖 예제 및 실행결과 예제 Baekjoon Online Judge 실행결과 Onrxwbba Bayvar Whqtr ⌨️ 문제 풀이 각 문자열을 순회하면서 아스키코드에 해당하는 숫자를 대문자일 경우와 소문자일 경우를 나눠 처리를 하고</description>
    </item>
    <item>
      <title>[BOJ] 1236 성 지키기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1236-%EC%84%B1-%EC%A7%80%ED%82%A4%EA%B8%B0-with-python/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1236-%EC%84%B1-%EC%A7%80%ED%82%A4%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 1236 성 지키기 💡 조건 직사각형 모양의 성을 가지고 있다. 성의 1층은 몇 명의 경비원에 의해서 보호되고 있다.
영식이는 모든 행과 모든 열에 한 명 이상의 경비원이 있으면 좋겠다고 생각했다. 성의 크기와 경비원이 어디있는지 주어졌을 때, 몇 명의 경비원을 최소로 추가해야 영식이를 만족시키는지 구하는 문제 0 &amp;lt;= N, M &amp;lt;= 50 성의 상태는 .은 빈칸, X는 경비원이 있는 칸이다. 구현, 시뮬레이션유형의 문제 🔖 예제 및 실행결과 예제 4 4 .</description>
    </item>
    <item>
      <title>[BOJ] 2535 아시아 정보올림피아드 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-2535-%EC%95%84%EC%8B%9C%EC%95%84-%EC%A0%95%EB%B3%B4%EC%98%AC%EB%A6%BC%ED%94%BC%EC%95%84%EB%93%9C-with-python/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-2535-%EC%95%84%EC%8B%9C%EC%95%84-%EC%A0%95%EB%B3%B4%EC%98%AC%EB%A6%BC%ED%94%BC%EC%95%84%EB%93%9C-with-python/</guid>
      <description>📌 BOJ 2535 아시아 정보올림피아드 💡 조건 대회참가 학생 수를 나타내는 N, 3 ≤ N ≤ 100. N개의 줄에는 각 줄마다 한 학생의 소속 국가 번호, 학생 번호, 그리고 성적이 하나의 빈칸을 사이에 두고 주어진다. 국가 번호는 1부터 순서대로 하나의 정수로 주어지며, 각 학생번호는 각 나라별로 1부터 순서대로 하나의 정수로 주어진다. 점수는 0 이상 1000 이하의 정수이고, 동점자는 없다고 가정한다. 정렬, 구현유형의 문제. 🔖 예제 및 실행결과 예제 9 1 1 230 1 2 210 1 3 205 2 1 100 2 2 150 3 1 175 3 2 190 3 3 180 3 4 195 실행결과 1 1 1 2 3 4 ⌨️ 문제 풀이 입력을 받아 리스트에 저장할 때, 점수, 참가국, 학생번호 순으로 저장한다.</description>
    </item>
    <item>
      <title>[BOJ] 1292 쉽게 푸는 문제 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1292-%EC%89%BD%EA%B2%8C-%ED%91%B8%EB%8A%94-%EB%AC%B8%EC%A0%9C-with-python/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1292-%EC%89%BD%EA%B2%8C-%ED%91%B8%EB%8A%94-%EB%AC%B8%EC%A0%9C-with-python/</guid>
      <description>📌 BOJ 1292 쉽게 푸는 문제 💡 조건 1을 한 번, 2를 두 번, 3을 세 번, 이런 식으로 1 2 2 3 3 3 4 4 4 4 5 .. 이러한 수열을 만들고
어느 일정한 구간을 주면 그 구간의 합을 구하는 문제 정수 A, B(1 ≤ A ≤ B ≤ 1,000)가 주어진다.
수열에서 A번째 숫자부터 B번째 숫자까지 합을 구하면 된다. 다이나믹 프로그래밍, 수학, 구현유형의 문제 🔖 예제 및 실행결과 예제 3 7 실행결과 15 ⌨️ 문제 풀이 리스트에 구간합에 대해 값을 저장하여 arr[m] - arr[n-1]을 하여 출력하면 된다.</description>
    </item>
    <item>
      <title>[BOJ] 16234 인구 이동 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-16234-%EC%9D%B8%EA%B5%AC-%EC%9D%B4%EB%8F%99-with-python/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-16234-%EC%9D%B8%EA%B5%AC-%EC%9D%B4%EB%8F%99-with-python/</guid>
      <description>📌 BOJ 16234 인구 이동 💡 조건 N×N크기의 땅이 있고, 땅은 1×1개의 칸으로 나누어져 있다.
N, L, R이 주어진다. (1 ≤ N ≤ 50, 1 ≤ L ≤ R ≤ 100) 인구 이동은 하루 동안 다음과 같이 진행되고, 더 이상 아래 방법에 의해 인구 이동이 없을 때까지 지속된다. 국경선을 공유하는 두 나라의 인구 차이가 L명 이상, R명 이하라면, 두 나라가 공유하는 국경선을 오늘 하루 동안 연다. 위의 조건에 의해 열어야하는 국경선이 모두 열렸다면, 인구 이동을 시작한다.</description>
    </item>
    <item>
      <title>[BOJ] 14500 테트로미노 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-14500-%ED%85%8C%ED%8A%B8%EB%A1%9C%EB%AF%B8%EB%85%B8-with-python/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-14500-%ED%85%8C%ED%8A%B8%EB%A1%9C%EB%AF%B8%EB%85%B8-with-python/</guid>
      <description>📌 BOJ 14500 테트로미노 💡 조건 크기가 N×M인 종이 위에 테트로미노 하나를 놓으려고 한다. 종이는 1×1 크기의 칸으로 나누어져 있으며, 각각의 칸에는 정수가 하나 쓰여 있다. 테트로미노 하나를 적절히 놓아서 테트로미노가 놓인 칸에 쓰여 있는 수들의 합을 최대로 해야한다. 테트로미노는 반드시 한 정사각형이 정확히 하나의 칸을 포함하도록 놓아야 하며, 회전이나 대칭을 시켜도 된다. 종이의 세로 크기 N과 가로 크기 M이 주어진다. (4 ≤ N, M ≤ 500) N개의 줄에 종이에 쓰여 있는 수가 주어진다.</description>
    </item>
    <item>
      <title>[BOJ] 9933 민균이의 비밀번호 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-9933-%EB%AF%BC%EA%B7%A0%EC%9D%B4%EC%9D%98-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-with-python-copy/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-9933-%EB%AF%BC%EA%B7%A0%EC%9D%B4%EC%9D%98-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-with-python-copy/</guid>
      <description>📌 BOJ 9933 민균이의 비밀번호 💡 조건 민균이의 비밀번호가 &amp;ldquo;tulipan&amp;quot;인 경우에 목록에는 &amp;ldquo;napilut&amp;quot;도 존재해야 한다. 민균이의 파일에 적혀있는 단어가 모두 주어졌을 때, 비밀번호의 길이와 가운데 글자를 출력하는 프로그램을 작성하라. 단어의 수 N (2 ≤ N ≤ 100)이 주어진다. 단어는 알파벳 소문자로만 이루어져 있으며, 길이는 2보다 크고 14보다 작은 홀수이다. 구현, 문자열 유형의 문제 🔖 예제 및 실행결과 예제 4 las god psala sal 실행결과 3 a ⌨️ 문제 풀이 data 리스트에 입력되는 n개의 비밀번호를 저장한다.</description>
    </item>
    <item>
      <title>[BOJ] 11504 돌려 돌려 돌림판! with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-11504-%EB%8F%8C%EB%A0%A4-%EB%8F%8C%EB%A0%A4-%EB%8F%8C%EB%A6%BC%ED%8C%90-with-python/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-11504-%EB%8F%8C%EB%A0%A4-%EB%8F%8C%EB%A0%A4-%EB%8F%8C%EB%A6%BC%ED%8C%90-with-python/</guid>
      <description>📌 BOJ 11504 돌려 돌려 돌림판! 💡 조건 첫 번째 줄에 테스트케이스의 개수 T 테스트케이스의 첫 줄에는 돌림판을 N등분할 정수 N (1 ≤ N ≤ 100)
X, Y의 길이 M (1 ≤ M ≤ 9, M ≤ N)
다음 3개의 줄에 X의 각 자리수, Y의 각 자리수, 돌림판의 상태 돌림판에서 X ≤ Z ≤ Y를 만족하는 M자리의 수 Z가 몇 개가 있는 지를 출력 X와 Y사이에 있는 수가 123 밖에 없는 데 돌림판에서 2번 나온다면, 1이 아닌 2를 출력 구현, 시뮬레이션 유형의 문제 🔖 예제 및 실행결과 예제 3 8 3 2 0 0 3 1 1 3 7 8 3 1 9 2 7 5 2 8 8 9 9 1 3 2 5 4 6 3 0 0 0 9 9 9 1 2 3 4 5 6 실행결과 1 0 6 ⌨️ 문제 풀이 돌림판의 숫자를 입력받아, m개의 개수만큼 이어붙여 새로운 숫자를 만든다.</description>
    </item>
    <item>
      <title>[BOJ] 1063 킹 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1063-%ED%82%B9-with-python/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1063-%ED%82%B9-with-python/</guid>
      <description>📌 BOJ 1063 킹 💡 조건 체스판의 크기는 8*8
체스판에서의 말의 위치는 알파벳 하나와 숫자 하나로 구성되어 있다.
알파벳은 열(column), 숫자는 행(row)을 상징한다.
알파벳은 A
~H, 숫자는 1~
8까지이다.
킹이 움직일 수 있는 방법은 8가지가 있으며, 문제에 제시되어 있다.
체스판에 있는 돌은 킹이 움직인 방향으로 같이 움직인다.
체스판이나 돌이 입력에서 주어진대로 움직이다가 밖으로 나갈 경우, 그 이동은 건너 뛴다.
첫째 줄에 킹의 마지막 위치, 둘째 줄에 돌의 마지막 위치를 출력한다.</description>
    </item>
    <item>
      <title>[BOJ] 18511 큰 수 구성하기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-18511-%ED%81%B0-%EC%88%98-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-with-python/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-18511-%ED%81%B0-%EC%88%98-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 18511 큰 수 구성하기 💡 조건 N보다 작거나 같은 자연수 중에서, 집합 K의 원소로만 구성된 가장 큰 수를 출력하는 프로그램을 작성.
(10 ≤ N ≤ 100,000,000, 1 ≤ K의 원소의 개수 ≤ 3) K의 모든 원소는 1부터 9까지의 자연수로만 구성된다. 첫째 줄에 N보다 작거나 같은 자연수 중에서, K의 원소로만 구성된 가장 큰 수를 출력 브루트포스 알고리즘, 재귀함수 유형의 문제 🔖 예제 및 실행결과 예제 657 3 1 5 7 실행결과 577 ⌨️ 문제 풀이 n을 문자열로 바꾸었을 때의 길이를 le 라는 변수에 저장한다.</description>
    </item>
    <item>
      <title>[BOJ] 20546 🐜 기적의 매매법 🐜 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-20546-%EA%B8%B0%EC%A0%81%EC%9D%98-%EB%A7%A4%EB%A7%A4%EB%B2%95-with-python-copy/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-20546-%EA%B8%B0%EC%A0%81%EC%9D%98-%EB%A7%A4%EB%A7%A4%EB%B2%95-with-python-copy/</guid>
      <description>📌 BOJ 20546 🐜 기적의 매매법 🐜 💡 조건 모든 거래는 전량 매수와 전량 매도로 이루어진다. 현재 가지고 있는 현금이 100원이고 주가가 11원이라면 99원어치의 주식을 매수하는 것이다. 단, 현금이 100원 있고 주가가 101원이라면 주식을 살 수 없다. 성민이는 빚을 내서 주식을 하지는 않는다. 3일 연속 가격이 전일 대비 상승하는 주식은 다음날 무조건 가격이 하락한다고 가정한다. 따라서 현재 소유한 주식의 가격이 3일째 상승한다면, 전량 매도한다. 전일과 오늘의 주가가 동일하다면 가격이 상승한 것이 아니다.</description>
    </item>
    <item>
      <title>[BOJ] 14620 꽃길 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-14620-%EA%BD%83%EA%B8%B8-with-python/</link>
      <pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-14620-%EA%BD%83%EA%B8%B8-with-python/</guid>
      <description>📌 BOJ 14620 꽃길 💡 조건 꽃밭은 N * N 의 격자 모양이고, 씨앗을 (1, 1) ~ (N, N)의 지점 중 한곳에 심을 수 있다.
1년 후 상하좌우로 꽃잎이 펼쳐진다. 어떤 씨앗이 꽃이 핀 뒤, 다른 꽃잎 혹은 꽃술과 닿게 될 경우 꽃이 둘 다 죽어버린다. 서로 다른 세 씨앗을 모두 꽃이 피게하면서 가장 싼 가격에 화단을 대여하려고 한다.
진아가 꽃을 심을 수 있는 최소비용을 구하는 문제이다. 한 변의 길이 N(6 ≤ N ≤ 10) 화단의 지점당 가격(0 ≤ G ≤ 200) 브루트포스 알고리즘 유형의 문제 🔖 예제 및 실행결과 예제 6 1 0 2 3 3 4 1 1 1 1 1 1 0 0 1 1 1 1 3 9 9 0 1 99 9 11 3 1 0 3 12 3 0 0 0 1 실행결과 12 🖥 소스 코드 from sys import stdin, setrecursionlimit setrecursionlimit(10 ** 9) n = int(stdin.</description>
    </item>
    <item>
      <title>[BOJ] 1515 수 이어 쓰기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1515-%EC%88%98-%EC%9D%B4%EC%96%B4-%EC%93%B0%EA%B8%B0-with-python/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1515-%EC%88%98-%EC%9D%B4%EC%96%B4-%EC%93%B0%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 1515 수 이어 쓰기 💡 조건 1부터 N까지 모든 수를 차례대로 공백없이 한 줄에 다 썼다. 다솜이가 숫자의 일부를 지웠고, 지워지기 전의 숫자를 다시 쓰려고 하니 N이 기억나지 않는다. 남은 수를 이어 붙인 수가 주어질 경우, N의 최솟값을 구하는 문제. 일부 숫자를 지우고 남은 수를 이어붙인 수가 주어지며, 이 수는 최대 3000자리. 구현, 문자열, 브루트포스 알고리즘 유형의 문제 🔖 예제 및 실행결과 예제 00000000000000000000000000000000000000000000000000000000000000000000000 실행결과 400 ⌨️ 문제 풀이 1부터 수를 늘려가면서 완전탐색을 실행하면 된다.</description>
    </item>
    <item>
      <title>[BOJ] 2615 오목 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-2615-%EC%98%A4%EB%AA%A9-with-python/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-2615-%EC%98%A4%EB%AA%A9-with-python/</guid>
      <description>📌 BOJ 2615 오목 💡 조건 바둑판에는 19개의 가로줄과 19개의 세로줄이 그려져 있다. board의 크기는 19 * 19
검은 바둑알은 1, 흰 바둑알은 2, 알이 놓이지 않는 자리는 0으로 표시
가로, 세로 또는 대각선 방향 모두 포함해서 같은 색의 바둑돌이 5개 놓여져 있다면 승리한다.
5개 초과 또는 미만의 개수는 승리할 수 없다
검은색이 이겼는지, 흰색이 이겼는지 또는 아직 승부가 결정되지 않았는지를 판단하는 프로그램을 작성.
검은색이 이겼을 경우에는 1을, 흰색이 이겼을 경우에는 2를, 아직 승부가 결정되지 않았을 경우에는 0을 출력</description>
    </item>
    <item>
      <title>[Programmers] 블록 이동하기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/programmers-%EB%B8%94%EB%A1%9D-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0-with-python/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/programmers-%EB%B8%94%EB%A1%9D-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0-with-python/</guid>
      <description>📌 Programmers 블록 이동하기 with Python 💡 조건 board의 한 변의 길이는 5 이상 100 이하.
board의 원소는 0(이동가능 블록) 또는 1(이동불가 벽). 로봇이 처음에 놓여 있는 칸 (1, 1), (1, 2)는 항상 0으로 주어진다. 로봇은 회전할 수 있다. BFS, 시뮬레이션의 문제 (N, N) 좌표까지 도달하는 최소시간을 구하는 문제 🔖 예제 및 실행결과 예제 print(solution([[0, 0, 0, 1, 1],[0, 0, 0, 1, 0],[0, 1, 0, 1, 1],[1, 1, 0, 0, 1],[0, 0, 0, 0, 0]])) 실행결과 7 🖥 소스 코드 from collections import deque def get_next_pos(pos, board): next_pos = [] pos = list(pos) pos1_x, pos1_y, pos2_x, pos2_y = pos[0][0], pos[0][1], pos[1][0], pos[1][1] dx = [-1, 1, 0, 0] dy = [0, 0, -1, 1] for i in range(4): pos1_next_x, pos1_next_y, pos2_next_x, pos2_next_y = pos1_x + dx[i], pos1_y + dy[i], pos2_x + dx[i], pos2_y + dy[i] if board[pos1_next_x][pos1_next_y] == 0 and board[pos2_next_x][pos2_next_y] == 0: next_pos.</description>
    </item>
    <item>
      <title>[Programmers] 자물쇠와 열쇠 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/programmers-%EC%9E%90%EB%AC%BC%EC%87%A0%EC%99%80-%EC%97%B4%EC%87%A0-with-python/</link>
      <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/programmers-%EC%9E%90%EB%AC%BC%EC%87%A0%EC%99%80-%EC%97%B4%EC%87%A0-with-python/</guid>
      <description>📌 Programmers 자물쇠와 열쇠 with Python 💡 조건 key는 M x M(3 ≤ M ≤ 20, M은 자연수) 크기 2차원 배열
lock은 N x N(3 ≤ N ≤ 20, N은 자연수) 크기 2차원 배열
M은 항상 N 이하, key와 lock의 원소는 0 또는 1 자물쇠는 홈이 있으며, 열쇠도 돌기가 있다. 열쇠는 회전이 가능하다. 자물쇠 부분이 회전할 수 있는 열쇠와 겹쳐져서 모두 1이 된다면 열 수 있으니 True, 열 수 없다면 False를 반환 구현 &amp;amp; 시뮬레이션 유형의 문제 🔖 예제 및 실행결과 예제 print(solution([[0, 0, 0], [1, 0, 0], [0, 1, 1]], [[0, 0, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0], [1, 0, 1, 0]])) 실행결과 true ⌨️ 문제 풀이 N과 M의 최대 크기가 20이니, 열쇠의 최소크기인 3만큼 자물쇠의 길이에 곱해서 맵을 뻥튀기 시킨다.</description>
    </item>
    <item>
      <title>[Programmers] 기둥과 보 설치 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/programmers-%EA%B8%B0%EB%91%A5%EA%B3%BC-%EB%B3%B4-%EC%84%A4%EC%B9%98-with-python/</link>
      <pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/programmers-%EA%B8%B0%EB%91%A5%EA%B3%BC-%EB%B3%B4-%EC%84%A4%EC%B9%98-with-python/</guid>
      <description>📌 Programmers 기둥과 보 설치 with Python 💡 조건 5 &amp;lt;= n &amp;lt;= 100
1 &amp;lt;= 입력받을 기둥과 보의 개수 &amp;lt;= 1000
`입력받을 기둥 혹은 보의 정보의 데이터 개수 == 4&#39;
바닥에 보를 설치하는 경우는 없다.
벽면을 벗어나게 설치하는 경우는 없다.
구조물은 교차점 좌표를 기준으로 보는 오른쪽, 기둥은 위쪽 방향으로 설치 또는 삭제한다.
구조물이 겹치거나, 없는 것을 삭제하는 경우는 없습니다.
구현&amp;amp;시뮬레이션 문제
반환하는 데이터는 x, y, 기둥 순으로 정렬하여 반환한다.</description>
    </item>
    <item>
      <title>[BOJ] 12100 2048(easy) with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-12100-2048easy-with-python/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-12100-2048easy-with-python/</guid>
      <description>📌 BOJ 12100 2048(easy) 💡 조건 보드의 크기는 N * N (1 ≤ N ≤ 20)
0 은 빈칸, 이외의 값은 블록의 값들을 나타낸다.
블록에 쓰여 있는 수는 2보다 크거나 같고, 1024보다 작거나 같은 2의 제곱꼴이다.
블록은 적어도 하나 주어진다. 같은 값을 갖는 두 블록이 충돌하면 두 블록은 하나로 합쳐지게 된다. 한 번의 이동에서 이미 합쳐진 블록은 또 다른 블록과 다시 합쳐질 수 없다. 최대 다섯번 이동 시켜서 얻을 수 있는 가장 큰 블록의 값을 출력.</description>
    </item>
    <item>
      <title>[BOJ] 1713 후보 추천하기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1713-%ED%9B%84%EB%B3%B4-%EC%B6%94%EC%B2%9C%ED%95%98%EA%B8%B0-with-python/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1713-%ED%9B%84%EB%B3%B4-%EC%B6%94%EC%B2%9C%ED%95%98%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 1713 후보 추천하기 💡 조건 사진틀의 개수 N이 주어진다. (1 ≤ N ≤ 20)
총 추천 횟수는 1,000번 이하이며 학생을 나타내는 번호는 1부터 100까지의 자연수 사진틀의 개수와 전체 학생의 추천 결과가 추천받은 순서대로 주어졌을 때, 최종 후보가 누구인지 결정 구현 &amp;amp; 시뮬레이션 유형의 문제 🔖 예제 및 실행결과 예제 3 9 2 1 4 3 5 6 2 7 2 실행결과 2 6 7 ⌨️ 문제 풀이 추천받은 순서대로 주어진 리스트를 순회하며 student (dict) 에 없으면 새로 추가하고,</description>
    </item>
    <item>
      <title>[BOJ] 1743 음식물 피하기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1743-%EC%9D%8C%EC%8B%9D%EB%AC%BC-%ED%94%BC%ED%95%98%EA%B8%B0-with-python/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1743-%EC%9D%8C%EC%8B%9D%EB%AC%BC-%ED%94%BC%ED%95%98%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 1743 음식물 피하기 💡 조건 통로의 세로 길이 N(1 ≤ N ≤ 100)
통로의 가로 길이 M(1 ≤ M ≤ 100)
음식물 쓰레기의 개수 K(1 ≤ K ≤ N×M)
K개의 줄에 음식물이 떨어진 좌표 (r, c) DFS 유형의 문제(깊이우선탐색) 🔖 예제 및 실행결과 예제 3 4 5 3 2 2 2 3 1 2 3 1 1 실행결과 4 ⌨️ 문제 풀이 m * n 크기의 맵을 만들어 0으로 도배를 한 후, 쓰레기가 있는 곳의 좌표를 받아 1이라고 표시했다.</description>
    </item>
    <item>
      <title>[BOJ] 1244 스위치 켜고 끄기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1244-%EC%8A%A4%EC%9C%84%EC%B9%98-%EC%BC%9C%EA%B3%A0-%EB%81%84%EA%B8%B0-with-python/</link>
      <pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1244-%EC%8A%A4%EC%9C%84%EC%B9%98-%EC%BC%9C%EA%B3%A0-%EB%81%84%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 1244 스위치 켜고 끄기 💡 조건 및 풀이 첫째 줄은 스위치 개수. 스위치 개수는 100 이하인 양의 정수.
둘째 줄은 각 스위치의 상태. 켜져 있으면 1, 꺼져있으면 0이라고 표시
셋째 줄에는 학생 수. 학생수는 100 이하인 양의 정수
넷째 줄부터 마지막 줄까지 한 줄에 한 학생의 성별, 학생이 받은 수. 남학생은 스위치 번호가 자기가 받은 수의 배수이면, 그 스위치의 상태를 바꾼다. 즉, 스위치가 켜져 있으면 끄고, 꺼져 있으면 켠다.</description>
    </item>
    <item>
      <title>[Programmers] 메뉴 리뉴얼 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/programmers-%EB%A9%94%EB%89%B4-%EB%A6%AC%EB%89%B4%EC%96%BC-with-python/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/programmers-%EB%A9%94%EB%89%B4-%EB%A6%AC%EB%89%B4%EC%96%BC-with-python/</guid>
      <description>📌 Programmers - 메뉴 리뉴얼 💡 조건 및 풀이 orders 배열의 크기는 2 이상 20 이하. orders 배열의 각 원소는 크기가 2 이상 10 이하인 문자열.
각 문자열은 알파벳 대문자로만 이루어져 있으며 중복은 허용 안함. course 배열의 크기는 1 이상 10 이하.
course 배열의 각 원소는 2 이상 10 이하인 자연수가 오름차순으로 정렬 정답은 각 코스요리 메뉴의 구성을 문자열 형식으로 배열에 담아 사전 순으로 오름차순 정렬해서 return
배열의 각 원소에 저장된 문자열 또한 알파벳 오름차순으로 정렬</description>
    </item>
    <item>
      <title>[BOJ] 13305 주유소 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-13305-%EC%A3%BC%EC%9C%A0%EC%86%8C-with-python/</link>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-13305-%EC%A3%BC%EC%9C%A0%EC%86%8C-with-python/</guid>
      <description>📌 BOJ 13305 주유소 💡 조건 및 풀이 도시의 개수 2 &amp;lt;= N &amp;lt;= 100000 도시를 연결하는 간선의 길이가 N-1개 주어진다. 그리디 알고리즘 유형 문제 제일 왼쪽에서 오른쪽으로 이동하는 최소 비용을 계산 어느 도시에서 기름을 넣어 이동하는 것이 가장 비용이 저렴한지에 대해 계산하면 된다. 서브태스크 점수가 주어진다 17점 모든 주유소의 리터당 가격은 1원 41점 2 &amp;lt;= N &amp;lt;= 1000
제일 왼쪽 도시부터 제일 오른쪽 도시까지의 거리는 최대 10000,
리터 당 가격은 최대 10000 42점 원래의 제약조건 이외에 아무 제약조건이 없다.</description>
    </item>
    <item>
      <title>[BOJ] 17521 Byte Coin with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-17521-byte-coin-with-python/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-17521-byte-coin-with-python/</guid>
      <description>📌 BOJ 17521 Byte Coin 💡 조건 및 풀이 주식 시장에서 단타를 치는 국제자본 부동산 회사를 도와 최고의 수익을 내는 문제. 일 수를 나타내는 1 &amp;lt;= n &amp;lt;= 15 초기 현금을 나타내는 W 다음 n 개의 줄에서, i번째 줄은 i일의 바이트 코인 가격을 나타내는
정수 si가 주어진다(1 ≤ si ≤ 50). 단순 구현, 그리디 알고리즘 문제 🔖 예제 및 실행결과 예제 10 24 5 7 5 4 2 7 8 5 3 4 실행결과 170 ⌨️ 문제 풀이 현재 매수한 코인이 있는지의 상태를 체크할 수 있는 변수 &amp;quot;m&amp;quot; (기본값은 False)</description>
    </item>
    <item>
      <title>[Programmers] 문자열 압축 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/programmers-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95-with-python/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/programmers-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95-with-python/</guid>
      <description>📌 Programmers - 문자열 압축 💡 조건 및 풀이 입력 받는 의 길이는 1 &amp;lt;= s &amp;lt;= 1000, 소문자로만 이루어져 있다. 문자열을 1개 단위로 자르는 것부터 s의 길이 만큼 자르는 것까지 계산 완전탐색, 구현 문제 문자열을 자르고 숫자를 붙이는 것에서 쓸데 없는 문자가 들어가지 않도록 주의 🔖 예제 및 실행결과 예제 print(solution(&amp;#34;aabbaccc&amp;#34;)) print(solution(&amp;#34;ababcdcdababcdcd&amp;#34;)) print(solution(&amp;#34;abcabcdede&amp;#34;)) print(solution(&amp;#34;abcabcabcabcdededededede&amp;#34;)) print(solution(&amp;#34;xababcdcdababcdcd&amp;#34;)) 실행결과 7 9 8 14 17 ⌨️ 문제 풀이 answer의 값을 s의 길이로 초기화.</description>
    </item>
  </channel>
</rss>
