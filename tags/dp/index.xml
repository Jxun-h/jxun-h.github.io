<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DP on Jxun-h Dev Log</title>
    <link>https://jxun-h.github.io/tags/dp/</link>
    <description>Recent content in DP on Jxun-h Dev Log</description>
    <image>
      <title>Jxun-h Dev Log</title>
      <url>https://jxun-h.github.io/images/papermod-cover.png</url>
      <link>https://jxun-h.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 Apr 2023 15:07:00 +0000</lastBuildDate>
    <atom:link href="https://jxun-h.github.io/tags/dp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[BOJ] 9658 돌 게임 4 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-9658-%EB%8F%8C-%EA%B2%8C%EC%9E%84-4-with-python/</link>
      <pubDate>Fri, 07 Apr 2023 15:07:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-9658-%EB%8F%8C-%EA%B2%8C%EC%9E%84-4-with-python/</guid>
      <description>📌 BOJ 9658 돌 게임 4 💡 조건 탁자 위에 돌 N개가 있다. 상근이와 창영이는 턴을 번갈아가면서 돌을 가져가며, 돌은 1개, 3개 또는 4개 가져갈 수 있다. 마지막 돌을 가져가는 사람이 게임을 지게 된다. 두 사람이 완벽하게 게임을 했을 때, 이기는 사람을 구하는 문제. 게임은 상근이가 먼저 시작한다. 첫째 줄에 N이 주어진다. (1 ≤ N ≤ 1000)
상근이가 게임을 이기면 SK를, 창영이가 게임을 이기면 CY을 출력한다. 다이나믹 프로그래밍 유형의 문제 🔖 예제 및 실행결과 예제 1 6 실행결과 1 SK ⌨️ 문제 풀이 돌 게임 3 와의 상황을 반대로 계산하면 된다.</description>
    </item>
    <item>
      <title>[BOJ] 9657 돌 게임 3 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-9657-%EB%8F%8C-%EA%B2%8C%EC%9E%84-3-with-python/</link>
      <pubDate>Tue, 04 Apr 2023 17:46:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-9657-%EB%8F%8C-%EA%B2%8C%EC%9E%84-3-with-python/</guid>
      <description>📌 BOJ 9657 돌 게임 3 💡 조건 탁자 위에 돌 N개가 있다. 상근이와 창영이는 턴을 번갈아가면서 돌을 가져가며, 돌은 1개, 3개 또는 4개 가져갈 수 있다. 마지막 돌을 가져가는 사람이 게임을 이기게 된다. 두 사람이 완벽하게 게임을 했을 때, 이기는 사람을 구하는 문제. 게임은 상근이가 먼저 시작한다. 첫째 줄에 N이 주어진다. (1 ≤ N ≤ 1000)
상근이가 게임을 이기면 SK를, 창영이가 게임을 이기면 CY을 출력한다. 다이나믹 프로그래밍 유형의 문제 🔖 예제 및 실행결과 예제 1 6 실행결과 1 SK ⌨️ 문제 풀이 상근이를 기준으로 DP 배열을 구성할 것이다.</description>
    </item>
    <item>
      <title>[BOJ] 9656 돌 게임2 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-9656-%EB%8F%8C-%EA%B2%8C%EC%9E%842-with-python/</link>
      <pubDate>Tue, 04 Apr 2023 17:31:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-9656-%EB%8F%8C-%EA%B2%8C%EC%9E%842-with-python/</guid>
      <description>📌 BOJ 9656 돌 게임2 💡 조건 탁자 위에 돌 N개가 있다. 상근이와 창영이는 턴을 번갈아가면서 돌을 가져가며, 돌은 1개 또는 3개 가져갈 수 있다. 마지막 돌을 가져가는 사람이 게임을 지게 된다. 두 사람이 완벽하게 게임을 했을 때, 이기는 사람을 구하는 문제. 게임은 상근이가 먼저 시작한다. 첫째 줄에 N이 주어진다. (1 ≤ N ≤ 1000)
상근이가 게임을 이기면 SK를, 창영이가 게임을 이기면 CY을 출력한다. 다이나믹 프로그래밍 유형의 문제 🔖 예제 및 실행결과 예제 1 4 실행결과 1 SK ⌨️ 문제 풀이 BOJ 9655 돌 게임 의 문제 풀이와 매우 비슷하다.</description>
    </item>
    <item>
      <title>[BOJ] 9655 돌 게임 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-9655-%EB%8F%8C-%EA%B2%8C%EC%9E%84-with-python/</link>
      <pubDate>Tue, 04 Apr 2023 17:19:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-9655-%EB%8F%8C-%EA%B2%8C%EC%9E%84-with-python/</guid>
      <description>📌 BOJ 9655 돌 게임 💡 조건 탁자 위에 돌 N개가 있다. 상근이와 창영이는 턴을 번갈아가면서 돌을 가져가며, 돌은 1개 또는 3개 가져갈 수 있다. 마지막 돌을 가져가는 사람이 게임을 이기게 된다. 두 사람이 완벽하게 게임을 했을 때, 이기는 사람을 구하는 문제. 게임은 상근이가 먼저 시작한다. 첫째 줄에 N이 주어진다. (1 ≤ N ≤ 1000)
상근이가 게임을 이기면 SK를, 창영이가 게임을 이기면 CY을 출력한다. 다이나믹 프로그래밍 유형의 문제 🔖 예제 및 실행결과 예제 1 5 실행결과 1 SK ⌨️ 문제 풀이 상근이를 기준으로 DP 배열을 구성할 것이다.</description>
    </item>
    <item>
      <title>[BOJ] 1890 점프 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1890-%EC%A0%90%ED%94%84-with-python/</link>
      <pubDate>Tue, 09 Aug 2022 17:33:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1890-%EC%A0%90%ED%94%84-with-python/</guid>
      <description>📌 BOJ 1890 점프 💡 조건 N×N 게임판에 수가 적혀져 있다.
N (4 ≤ N ≤ 100)
이 게임의 목표는 가장 왼쪽 위 칸에서 가장 오른쪽 아래 칸으로 규칙에 맞게 점프를 해서 가는 것이다.
각 칸에 적혀있는 수는 현재 칸에서 갈 수 있는 거리를 의미한다.
칸에 적혀있는 수는 0보다 크거나 같고, 9보다 작거나 같은 정수이며, 가장 오른쪽 아래 칸에는 항상 0이 주어진다.
반드시 오른쪽이나 아래쪽으로만 이동해야 한다.
0은 더 이상 진행을 막는 종착점이며, 항상 현재 칸에 적혀있는 수만큼 오른쪽이나 아래로 가야 한다.</description>
    </item>
    <item>
      <title>[BOJ] 14495 피보나치 비스무리한 수열 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-14495-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EB%B9%84%EC%8A%A4%EB%AC%B4%EB%A6%AC%ED%95%9C-%EC%88%98%EC%97%B4-with-python/</link>
      <pubDate>Sun, 17 Jul 2022 01:39:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-14495-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EB%B9%84%EC%8A%A4%EB%AC%B4%EB%A6%AC%ED%95%9C-%EC%88%98%EC%97%B4-with-python/</guid>
      <description>📌 BOJ 14495 피보나치 비스무리한 수열 💡 조건 피보나치 비스무리한 수열은 f(n) = f(n-1) + f(n-3)인 수열이다.
f(1) = f(2) = f(3) = 1이며 피보나치 비스무리한 수열을 나열하면 다음과 같다.
자연수 n을 입력받아 n번째 피보나치 비스무리한 수열을 구하는 문제.
자연수 n의 범위는 (1 ≤ n ≤ 116) 이다.
DP 유형의 문제
🔖 예제 및 실행결과 예제 10 실행결과 19 ⌨️ 문제 풀이 문제에 점화식이 주어졌다. 🖥 소스 코드 from sys import stdin dp = [0 for _ in range(120)] dp[0:3] = [1, 1, 1, 2] for x in range(4, 117): dp[x] = (dp[x - 3] + dp[x - 1]) print(dp[int(stdin.</description>
    </item>
    <item>
      <title>[BOJ] 14494 다이나믹이 뭐예요? with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-14494-%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%EC%9D%B4-%EB%AD%90%EC%98%88%EC%9A%94-with-python/</link>
      <pubDate>Thu, 14 Jul 2022 23:07:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-14494-%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%EC%9D%B4-%EB%AD%90%EC%98%88%EC%9A%94-with-python/</guid>
      <description>📌 BOJ 14494 다이나믹이 뭐예요? 💡 조건 다이나믹 프로그래밍(동적 계획법),
다이나믹은 이름이 엄청 거창하지만 사실 이름에 비해 개념은 간단하다.
다이나믹의 기본 아이디어는 바로 이전에 계산한 값을 사용해서
(= 이미 계산된 값을 사용해서, 어려운 말로 메모이제이션.)
반복되는 똑같은 연산 횟수를 줄이는 것.
다차원 배열로도 가능하다. 오른쪽, 아래쪽으로만 움직일 수 있을 때,
D[1][1]에서 D[x][y]까지 도달하는 경우의 수를 구하는 문제는 일일히 모든 경우를 다 계산할 필요 없이,
D[i][j] = (i, j)에 도달하는 누적 경우의 수 = D[i-1][j] + D[i][j-1]를 세워서 해결할 수도 있다.</description>
    </item>
    <item>
      <title>[BOJ] 2225 합분해 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-2225-%ED%95%A9%EB%B6%84%ED%95%B4-with-python/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-2225-%ED%95%A9%EB%B6%84%ED%95%B4-with-python/</guid>
      <description>📌 BOJ 2225 합분해 💡 조건 덧셈의 순서가 바뀐 경우는 다른 경우로 센다(1+2와 2+1은 서로 다른 경우).
또한 한 개의 수를 여러 번 쓸 수도 있다.
첫째 줄에 두 정수 N(1 ≤ N ≤ 200), K(1 ≤ K ≤ 200)가 주어진다.
첫째 줄에 답을 1,000,000,000으로 나눈 나머지를 출력한다.
0부터 N까지의 정수 K개를 더해서 그 합이 N이 되는 경우의 수를 구하는 문제
DP, 다이나믹프로그래밍 유형의 문제
🔖 예제 및 실행결과 예제 20 2 실행결과 21 ⌨️ 문제 풀이 0부터 N까지의 정수 K개를 이용해 N을 만드는 방법은 0부터 N개까지 k-1를 만드는 개수의 합과 같다.</description>
    </item>
    <item>
      <title>[BOJ] 1915 가장 큰 정사각형 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1915-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EC%A0%95%EC%82%AC%EA%B0%81%ED%98%95-with-python/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1915-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EC%A0%95%EC%82%AC%EA%B0%81%ED%98%95-with-python/</guid>
      <description>📌 BOJ 1915 가장 큰 정사각형 💡 조건 아래와 같은 예제에서는 가운데의 2×2 배열이 가장 큰 정사각형이다. 첫째 줄에 n, m(1 ≤ n, m ≤ 1,000)이 주어진다.
다음 n개의 줄에는 m개의 숫자로 배열이 주어진다.
n×m의 0, 1로 된 배열이 있다. 이 배열에서 1로 된 가장 큰 정사각형의 크기를 구하는 문제.
DP, 다이나믹프로그래밍 유형의 문제
🔖 예제 및 실행결과 예제 4 4 0100 0111 1110 0010 실행결과 4 ⌨️ 문제 풀이 가장 큰 정사각형의 넓이를 구해야하는데, 정사각형이 되는 상태를 dp 배열에 저장하면서 가장 큰 변의 길이를 구하면 된다.</description>
    </item>
    <item>
      <title>[BOJ] 1520 내리막 길 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1520-%EB%82%B4%EB%A6%AC%EB%A7%89-%EA%B8%B8-with-python/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1520-%EB%82%B4%EB%A6%AC%EB%A7%89-%EA%B8%B8-with-python/</guid>
      <description>📌 BOJ 1520 내리막 길 💡 조건 지도는 아래 그림과 같이 직사각형 모양이며 여러 칸으로 나뉘어져 있다.
한 칸은 한 지점을 나타내는데 각 칸에는 그 지점의 높이가 쓰여 있으며, 각 지점 사이의 이동은 지도에서 상하좌우 이웃한 곳끼리만 가능하다.
현재 제일 왼쪽 위 칸이 나타내는 지점에 있는 세준이는 제일 오른쪽 아래 칸이 나타내는 지점으로 가려고 한다.
그런데 가능한 힘을 적게 들이고 싶어 항상 높이가 더 낮은 지점으로만 이동하여 목표 지점까지 가고자 한다.</description>
    </item>
    <item>
      <title>[BOJ] 1309 동물원 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1309-%EB%8F%99%EB%AC%BC%EC%9B%90-with-python/</link>
      <pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1309-%EB%8F%99%EB%AC%BC%EC%9B%90-with-python/</guid>
      <description>📌 BOJ 1309 동물원 💡 조건 어떤 동물원에 가로로 두칸 세로로 N칸인 아래와 같은 우리가 있다.
이 동물원에는 사자들이 살고 있는데 사자들을 우리에 가둘 때, 가로로도 세로로도 붙어 있게 배치할 수는 없다.
동물원 조련사의 머리가 아프지 않도록 우리가 2*N 배열에 사자를 배치하는 경우의 수가 몇 가지인지를 알아내는 프로그램을 작성하는 문제.
사자를 한 마리도 배치하지 않는 경우도 하나의 경우의 수로 친다고 가정한다.
첫째 줄에 우리의 크기 N(1≤N≤100,000)이 주어진다.
첫째 줄에 사자를 배치하는 경우의 수를 9901로 나눈 나머지를 출력하자.</description>
    </item>
    <item>
      <title>[BOJ] 17485 진우의 달 여행 (Large) with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-17485-%EC%A7%84%EC%9A%B0%EC%9D%98-%EB%8B%AC-%EC%97%AC%ED%96%89-large-with-python/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-17485-%EC%A7%84%EC%9A%B0%EC%9D%98-%EB%8B%AC-%EC%97%AC%ED%96%89-large-with-python/</guid>
      <description>📌 BOJ 17485 진우의 달 여행 (Large) 💡 조건 지구와 우주사이는 N X M 행렬로 나타낼 수 있으며 각 원소의 값은 우주선이 그 공간을 지날 때 소모되는 연료의 양이다.
N, M (2 ≤ N, M ≤ 1000), 각 행렬의 원소값은 100 이하의 자연수이다. 지구 -&amp;gt; 달로 가는 경우 우주선이 움직일 수 있는 방향은 아래와 같다. 우주선은 전에 움직인 방향으로 움직일 수 없다. 즉, 같은 방향으로 두번 연속으로 움직일 수 없다.</description>
    </item>
    <item>
      <title>[BOJ] 2342 Dance Dance Revolution with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-2342-dance-dance-revolution-with-python/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-2342-dance-dance-revolution-with-python/</guid>
      <description>📌 BOJ 2342 Dance Dance Revolution 💡 조건 편의상 중점을 0, 위를 1, 왼쪽을 2, 아래를 3, 오른쪽을 4라고 정하자. 처음에 게이머는 두 발을 중앙에 모으고 있다.(그림에서 0의 위치)
그리고 게임이 시작하면, 지시에 따라 왼쪽 또는 오른쪽 발을 움직인다. 하지만 그의 두 발이 동시에 움직이지는 않는다.
두 발이 같은 지점에 있는 것이 허락되지 않는다.
한 발이 1의 위치에 있고, 다른 한 발이 3의 위치에 있을 때, 3을 연속으로 눌러야 한다면, 3의 위치에 있는 발로 반복해야 눌러야 한다.</description>
    </item>
    <item>
      <title>[BOJ] 2302 극장 좌석 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-2302-%EA%B7%B9%EC%9E%A5-%EC%A2%8C%EC%84%9D-with-python/</link>
      <pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-2302-%EA%B7%B9%EC%9E%A5-%EC%A2%8C%EC%84%9D-with-python/</guid>
      <description>📌 BOJ 2302 극장 좌석 💡 조건 어떤 극장의 좌석은 한 줄로 되어 있으며 왼쪽부터 차례대로 1번부터 N번까지 번호가 매겨져 있다.
공연을 보러 온 사람들은 자기의 입장권에 표시되어 있는 좌석에 앉아야 한다. 자기의 바로 왼쪽 좌석 또는 바로 오른쪽 좌석으로는 자리를 옮길 수 있다. 이 극장에는 “VIP 회원”들이 있다. 이 사람들은 반드시 자기 좌석에만 앉아야 하며 옆 좌석으로 자리를 옮길 수 없다. 오늘 공연은 입장권이 매진되어 1번 좌석부터 N번 좌석까지 모든 좌석이 다 팔렸다.</description>
    </item>
    <item>
      <title>[BOJ] 12761 돌다리 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-12761-%EB%8F%8C%EB%8B%A4%EB%A6%AC-with-python/</link>
      <pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-12761-%EB%8F%8C%EB%8B%A4%EB%A6%AC-with-python/</guid>
      <description>📌 BOJ 12761 돌다리 💡 조건 돌의 번호는 0 부터 100,000 까지 존재하고 동규는 N번 돌 위에, 주미는 M번 돌 위에 위치하고 있다. 동규는 주미가 너무 보고싶기 때문에 최대한 빨리 주미에게 가기 위해 A, B 만큼의 힘을 가진 스카이 콩콩을 가져왔다. 현 위치에서 +1칸, -1칸을 이동할 수 있고, 스카이 콩콩을 이용해 현 위치에서 A나 B만큼 좌우로 점프할 수 있으며,
순간적으로 힘을 모아 현 위치의 A배 나 B배의 위치로 이동을 할 수 있다.</description>
    </item>
    <item>
      <title>[BOJ] 2631 줄세우기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-2631-%EC%A4%84%EC%84%B8%EC%9A%B0%EA%B8%B0-with-python/</link>
      <pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-2631-%EC%A4%84%EC%84%B8%EC%9A%B0%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 2631 줄세우기 💡 조건 선생님은 1번부터 N번까지 번호가 적혀있는 번호표를 아이들의 가슴에 붙여주었다. 선생님은 아이들을 효과적으로 보호하기 위해 목적지까지 번호순서대로 일렬로 서서 걸어가도록 하였다. 이동 도중에 보니 아이들의 번호순서가 바뀌어 다시 번호 순서대로 줄을 세우기 위해서 아이들의 위치를 옮기려고 한다. 아이들이 혼란스러워하지 않도록 하기 위해 위치를 옮기는 아이들의 수를 최소로 하려고 한다. 아이들의 수 N은 2 이상 200 이하의 정수이다. 다이나믹프로그래밍 유형의 문제 🔖 예제 및 실행결과 예제 7 3 7 5 2 6 1 4 실행결과 4 ⌨️ 문제 풀이 가장 긴 증가하는 부분 수열 알고리즘으로 해결 할 수 있는 문제입니다.</description>
    </item>
    <item>
      <title>[BOJ] 12788 제 2회 IUPC는 잘 개최될 수 있을까? with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-12788-%EC%A0%9C-2%ED%9A%8C-iupc%EB%8A%94-%EC%9E%98-%EA%B0%9C%EC%B5%9C%EB%90%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C-with-python/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-12788-%EC%A0%9C-2%ED%9A%8C-iupc%EB%8A%94-%EC%9E%98-%EA%B0%9C%EC%B5%9C%EB%90%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C-with-python/</guid>
      <description>📌 BOJ 12788 제 2회 IUPC는 잘 개최될 수 있을까? 💡 조건 대회 개최를 위한 예산을 아끼기 위하여 펜을 구매하지 않고 CTP회원들에게 펜을 빌리기로 하였다. CTP에는 N명의 회원들이 존재하며 각각의 회원들의 필통에 들어있는 펜의 개수는 모두 다르다.
정은이는 여러명의 회원에게 펜을 빌릴경우 펜을 돌려주기에 번거롭다고 생각하여 최소한의 회원들에게 펜을 빌려 참가자들에게 나누어 주려고 한다. 대회에 참가하는 참가자들은 팀을 구성해서 참가하는데 모든 팀원에게 펜을 지급해야한다. 한 팀이 k명의 팀원으로 구성되어 있을때 몇 명의 회원들에게 펜을 빌려야하는지 출력하는 문제.</description>
    </item>
    <item>
      <title>[BOJ] 2493 탑 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-2493-%ED%83%91-with-python/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-2493-%ED%83%91-with-python/</guid>
      <description>📌 BOJ 2493 탑 💡 조건 일직선 위에 N개의 높이가 서로 다른 탑을 수평 직선의 왼쪽부터 오른쪽 방향으로 차례로 세우고, 각 탑의 꼭대기에 레이저 송신기를 설치하였다. 모든 탑의 레이저 송신기는 레이저 신호를 지표면과 평행하게 수평 직선의 왼쪽 방향으로 발사하고,
탑의 기둥 모두에는 레이저 신호를 수신하는 장치가 설치되어 있다.
하나의 탑에서 발사된 레이저 신호는 가장 먼저 만나는 단 하나의 탑에서만 수신이 가능하다. N과 탑들의 높이가 주어질 때, 각각의 탑에서 발사한 레이저 신호를 어느 탑에서 수신하는지를 알아내는 문제.</description>
    </item>
    <item>
      <title>[BOJ] 2096 내려가기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-2096-%EB%82%B4%EB%A0%A4%EA%B0%80%EA%B8%B0-with-python/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-2096-%EB%82%B4%EB%A0%A4%EA%B0%80%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 2096 내려가기 💡 조건 N줄에 0 이상 9 이하의 숫자가 세 개씩 적혀 있다.
내려가기 게임을 하고 있는데, 이 게임은 첫 줄에서 시작해서 마지막 줄에서 끝나게 되는 놀이이다. 먼저 처음에 적혀 있는 세 개의 숫자 중에서 하나를 골라서 시작하게 된다.
그리고 다음 줄로 내려가는데, 다음 줄로 내려갈 때에는 다음과 같은 제약 조건이 있다.
바로 아래의 수로 넘어가거나, 아니면 바로 아래의 수와 붙어 있는 수로만 이동할 수 있다는 것이다.</description>
    </item>
    <item>
      <title>[BOJ] 4811 알약 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-4811-%EC%95%8C%EC%95%BD-with-python/</link>
      <pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-4811-%EC%95%8C%EC%95%BD-with-python/</guid>
      <description>📌 BOJ 4811 알약 💡 조건 70세 박종수 할아버지는 매일 매일 약 반알을 먹는다.
손녀 선영이는 종수 할아버지에게 약이 N개 담긴 병을 선물로 주었다. 다음 날부터 종수는 병에서 약을 하나 꺼낸다.
(약은 한 조각 전체 일 수도 있고, 쪼갠 반 조각 일 수도 있다) 반 조각이라면 그 약을 먹고,
아니라면 반을 쪼개서 한 조각을 먹고, 다른 조각은 다시 병에 넣는다. 종수는 손녀에게 한 조각을 꺼낸 날에는 W를, 반 조각을 꺼낸 날에는 H 보낸다.</description>
    </item>
    <item>
      <title>[BOJ] 1660 캡틴 이다솜 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1660-%EC%BA%A1%ED%8B%B4-%EC%9D%B4%EB%8B%A4%EC%86%9C-with-python/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1660-%EC%BA%A1%ED%8B%B4-%EC%9D%B4%EB%8B%A4%EC%86%9C-with-python/</guid>
      <description>📌 BOJ 1660 캡틴 이다솜 💡 조건 N은 300,000보다 작거나 같은 자연수이다. 사면체를 만드는 방법은 길이가 N인 정삼각형 모양을 만든다.
그 위에 길이가 N-1인 정삼각형 모양을 얹고 그위에 계속 해서 얹어서 1크기의 정삼각형 모양을 얹으면 된다. N개의 대포알로 만들 수 있는 사면체의 최소 개수를 출력하는 프로그램을 작성하는 문제 다이나믹프로그래밍 유형의 문제 🔖 예제 및 실행결과 예제 15 실행결과 3 ⌨️ 문제 풀이 대포알의 개수는 1, 4, 10, 20 &amp;hellip; 순으로 늘어난다.</description>
    </item>
    <item>
      <title>[BOJ] 1788 피보나치수의 확장 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1788-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98%EC%88%98%EC%9D%98-%ED%99%95%EC%9E%A5-with-python/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1788-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98%EC%88%98%EC%9D%98-%ED%99%95%EC%9E%A5-with-python/</guid>
      <description>📌 BOJ 1788 피보나치수의 확장 💡 조건 피보나치 수 F(n)을 n이 음수인 경우로도 확장시킬 수 있다. F(n) = F(n-1) + F(n-2)를 n ≤ 1일 때도 성립되도록 정의하는 것이다. n = 1일 때 F(1) = F(0) + F(-1)이 성립되어야 하므로, F(-1)은 1이 되어야 한다. n이 주어졌을 때, 피보나치 수 F(n)을 구하는 프로그램을 작성하는 프로그램.
n은 음수로 주어질 수도 있다. n은 절댓값이 1,000,000을 넘지 않는 정수이다.
첫째 줄에 F(n)이 양수이면 1, 0이면 0, 음수이면 -1을 출력한다.</description>
    </item>
    <item>
      <title>[BOJ] 8394 악수 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-8394-%EC%95%85%EC%88%98-with-python/</link>
      <pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-8394-%EC%95%85%EC%88%98-with-python/</guid>
      <description>📌 BOJ 8394 악수 💡 조건 회의가 끝났고, 이제 악수를 하는 시간이다. 모든 사람은 직사각형 탁자 하나의 한 면에 앉아있다. 자리를 벗어나지 않고 악수를 하는 방법의 수를 구하는 문제 각 사람들은 자신의 왼쪽이나 오른쪽에 있는 사람들과 악수를 할 수 있다. (안 할 수도 있다) 첫째 줄에 회의에 참석한 사람의 수 n (1 ≤ n ≤ 10,000,000)이 주어진다. 수가 매우 커질 수 있기 때문에, 마지막 자리만 출력한다. 다이나믹프로그래밍 유형의 문제 🔖 예제 및 실행결과 예제 4 실행결과 5 ⌨️ 문제 풀이 n 이 1일 때는 악수를 안하는 경우, n이 2일 때는 악수를 안하는 경우와 둘이 악수를 하는 경우가 있다.</description>
    </item>
    <item>
      <title>[BOJ] 11048 이동하기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-11048-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0-with-python/</link>
      <pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-11048-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 11048 이동하기 💡 조건 N×M 크기의 미로 (1 ≤ N, M ≤ 1,000) (r, c)에 있으면, (r+1, c), (r, c+1), (r+1, c+1)로 이동가능. 준규가 (N, M)으로 이동할 때, 가져올 수 있는 사탕 개수의 최댓값을 구하는 문제 N개 줄에는 총 M개의 숫자가 주어지며, r번째 줄의 c번째 수는 (r, c)에 놓여져 있는 사탕의 개수이다. 사탕의 개수는 0보다 크거나 같고, 100보다 작거나 같다. 다이나믹프로그래밍 유형의 문제 🔖 예제 및 실행결과 예제 4 3 1 2 3 6 5 4 7 8 9 12 11 10 실행결과 47 ⌨️ 문제 풀이 다이나믹 프로그래밍 유형의 문제입니다.</description>
    </item>
    <item>
      <title>[BOJ] 1292 쉽게 푸는 문제 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1292-%EC%89%BD%EA%B2%8C-%ED%91%B8%EB%8A%94-%EB%AC%B8%EC%A0%9C-with-python/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1292-%EC%89%BD%EA%B2%8C-%ED%91%B8%EB%8A%94-%EB%AC%B8%EC%A0%9C-with-python/</guid>
      <description>📌 BOJ 1292 쉽게 푸는 문제 💡 조건 1을 한 번, 2를 두 번, 3을 세 번, 이런 식으로 1 2 2 3 3 3 4 4 4 4 5 .. 이러한 수열을 만들고
어느 일정한 구간을 주면 그 구간의 합을 구하는 문제 정수 A, B(1 ≤ A ≤ B ≤ 1,000)가 주어진다.
수열에서 A번째 숫자부터 B번째 숫자까지 합을 구하면 된다. 다이나믹 프로그래밍, 수학, 구현유형의 문제 🔖 예제 및 실행결과 예제 3 7 실행결과 15 ⌨️ 문제 풀이 리스트에 구간합에 대해 값을 저장하여 arr[m] - arr[n-1]을 하여 출력하면 된다.</description>
    </item>
    <item>
      <title>[BOJ] 1904 01타일 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1904-01%ED%83%80%EC%9D%BC-with-python/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1904-01%ED%83%80%EC%9D%BC-with-python/</guid>
      <description>📌 BOJ 1904 01타일 💡 조건 각각의 타일들은 0 또는 1이 쓰여 있는 낱장의 타일들이다. 동주가 지원이의 공부를 방해하기 위해 0이 쓰여진 낱장의 타일들을 붙여서 한 쌍으로 이루어진 00 타일들을 만들었다.
결국 현재 1 하나만으로 이루어진 타일 또는 0타일을 두 개 붙인 한 쌍의 00타일들만이 남게 되었다. N=1일 때 1만 만들 수 있고, N=2일 때는 00, 11을 만들 수 있다. (01, 10은 만들 수 없게 되었다.)
또한 N=4일 때는 0011, 0000, 1001, 1100, 1111 등 총 5개의 2진 수열을 만들 수 있다.</description>
    </item>
    <item>
      <title>[BOJ] 14916 거스름돈 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-14916-%EA%B1%B0%EC%8A%A4%EB%A6%84%EB%8F%88-with-python/</link>
      <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-14916-%EA%B1%B0%EC%8A%A4%EB%A6%84%EB%8F%88-with-python/</guid>
      <description>📌 BOJ 14916 거스름돈 💡 조건 동전의 개수가 최소가 되도록 거슬러 주어야 한다. 거스름돈 액수 n(1 ≤ n ≤ 100,000) DP, 수학 유형의 문제 🔖 예제 및 실행결과 예제 13 실행결과 5 ⌨️ 문제 풀이 5원 동전이 몇 개 일때 최소인지 구하면 된다. int(1e9)로 결과값을 초기하화 해두고, n // 5 개부터 한개씩 5원짜리를 줄여가며 최소 갯수를 구한다. 5원 개수에 해당하는 금액만큼 n에서 뺀 후, 2 로 나누어 떨어지지 않을 경우 continue 5월 개수에 해당하는 금액만큼 n에서 뺀 나머지 금액이 2로 나누어 떨어지면 res 갱신 🖥 소스 코드 from sys import stdin n = int(stdin.</description>
    </item>
    <item>
      <title>[BOJ] 9461 파도반 수열 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-9461-%ED%8C%8C%EB%8F%84%EB%B0%98-%EC%88%98%EC%97%B4-with-python/</link>
      <pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-9461-%ED%8C%8C%EB%8F%84%EB%B0%98-%EC%88%98%EC%97%B4-with-python/</guid>
      <description>📌 BOJ 9461 파도반 💡 조건 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다.
(1 ≤ N ≤ 100) 파도반 수열 P(N)은 나선에 있는 정삼각형의 변의 길이. P(1)부터 P(10)까지 첫 10개 숫자는 1, 1, 1, 2, 2, 3, 4, 5, 7, 9 각 테스트 케이스마다 정수 N을 입력받아 P(N)을 출력. Dynamic Programming 알고리즘 유형의 문제 🔖 예제 및 실행결과 예제 2 6 12 실행결과 3 16 ⌨️ 문제 풀이 문제에서 이미 점화식을 짜라고 P(1)부터 P(10)까지 제공해주었다.</description>
    </item>
    <item>
      <title>[Programmers] 광고 삽입 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/programmers-%EA%B4%91%EA%B3%A0-%EC%82%BD%EC%9E%85-with-python/</link>
      <pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/programmers-%EA%B4%91%EA%B3%A0-%EC%82%BD%EC%9E%85-with-python/</guid>
      <description>📌 Programmers - 광고 삽입 💡 조건 및 풀이 동영상에 광고를 넣어야한다. 시청자가 가장 많은 구간에 광고를 넣어야한다.
= 시청자 수 구간합이 가장 큰 곳에 광고를 넣어야한다. 동영상 재생시간 길이 play_time, 공익광고의 재생시간 길이 adv_time,
시청자들이 해당 동영상을 재생했던 구간 정보 logs 구간합을 구해 답을 이끌어내는 유형의 문제 play_time, adv_time은 길이 8로 고정된 문자열
play_time, adv_time은 HH:MM:SS 형식이며,
00:00:01 &amp;lt;= play_time, adv_time &amp;lt;= 99:59:59 공익광고 재생시간은 동영상 재생시간보다 짧거나 같다.</description>
    </item>
    <item>
      <title>[BOJ] 15486 퇴사 2 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-15486-%ED%87%B4%EC%82%AC-2-with-python/</link>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-15486-%ED%87%B4%EC%82%AC-2-with-python/</guid>
      <description>📌 BOJ 15486 퇴사 2 💡 조건 및 풀이 퇴사가 남은 일 수 N. 1 &amp;lt;= N &amp;lt;= 1500000 T, P 의 길이는 N과 같으며, 1 &amp;lt;= Ti &amp;lt;= 50, 1 &amp;lt;= Pi &amp;lt;= 1000 N + 1 에 해당하는 날짜부터는 상담을 할 수 없다. DP 유형의 문제 상담을 통해 취한 이익 중, 가장 큰 값을 반환하는 문제. 🔖 예제 및 실행결과 예제 10 5 50 4 40 3 30 2 20 1 10 1 10 2 20 3 30 4 40 5 50 실행결과 90 ```python &amp;lt;br&amp;gt; ### ⌨️ 문제 풀이 1.</description>
    </item>
  </channel>
</rss>
