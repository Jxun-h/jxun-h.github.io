<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>자료구조 on Jxun-h Dev Log</title>
    <link>https://jxun-h.github.io/tags/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/</link>
    <description>Recent content in 자료구조 on Jxun-h Dev Log</description>
    <image>
      <title>Jxun-h Dev Log</title>
      <url>https://jxun-h.github.io/images/papermod-cover.png</url>
      <link>https://jxun-h.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 12 Dec 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jxun-h.github.io/tags/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Programmers] 블록 이동하기 with Python</title>
      <link>https://jxun-h.github.io/posts/temp/programmers-%EB%B8%94%EB%A1%9D-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0-with-python/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/temp/programmers-%EB%B8%94%EB%A1%9D-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0-with-python/</guid>
      <description>📌 Programmers 블록 이동하기 with Python 💡 조건 board의 한 변의 길이는 5 이상 100 이하.
board의 원소는 0(이동가능 블록) 또는 1(이동불가 벽). 로봇이 처음에 놓여 있는 칸 (1, 1), (1, 2)는 항상 0으로 주어진다. 로봇은 회전할 수 있다. BFS, 시뮬레이션의 문제 (N, N) 좌표까지 도달하는 최소시간을 구하는 문제 🔖 예제 및 실행결과 예제 print(solution([[0, 0, 0, 1, 1],[0, 0, 0, 1, 0],[0, 1, 0, 1, 1],[1, 1, 0, 0, 1],[0, 0, 0, 0, 0]])) 실행결과 7 🖥 소스 코드 from collections import deque def get_next_pos(pos, board): next_pos = [] pos = list(pos) pos1_x, pos1_y, pos2_x, pos2_y = pos[0][0], pos[0][1], pos[1][0], pos[1][1] dx = [-1, 1, 0, 0] dy = [0, 0, -1, 1] for i in range(4): pos1_next_x, pos1_next_y, pos2_next_x, pos2_next_y = pos1_x + dx[i], pos1_y + dy[i], pos2_x + dx[i], pos2_y + dy[i] if board[pos1_next_x][pos1_next_y] == 0 and board[pos2_next_x][pos2_next_y] == 0: next_pos.</description>
    </item>
    <item>
      <title>[BOJ] 11497 통나무 건너뛰기 with Python</title>
      <link>https://jxun-h.github.io/posts/temp/boj-11497-%ED%86%B5%EB%82%98%EB%AC%B4-%EA%B1%B4%EB%84%88%EB%9B%B0%EA%B8%B0-with-python/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/temp/boj-11497-%ED%86%B5%EB%82%98%EB%AC%B4-%EA%B1%B4%EB%84%88%EB%9B%B0%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 11497 통나무 건너뛰기 💡 조건 첫 줄에 통나무의 개수를 나타내는 정수 (5 ≤ N ≤ 10,000)
둘째 줄에 각 통나무의 높이를 나타내는 정수 (1 ≤ Li ≤ 100,000) 통나무 건너뛰기의 난이도는 인접한 두 통나무 간의 높이의 차의 최댓값으로 결정된다.
가장 첫 통나무와 가장 마지막 통나무 역시 인접해 있다. 그리디 알고리즘유형의 문제 🔖 예제 및 실행결과 예제 3 7 13 10 12 11 10 11 12 5 2 4 5 7 9 8 6 6 6 6 6 6 6 6 실행결과 1 4 0 ⌨️ 문제 풀이 단순히 정렬을 해도 되지만, 첫 통나무와 마지막 통나무가 인접해있다는 조건이 있다.</description>
    </item>
    <item>
      <title>[Programmers] 외벽 점검 with Python</title>
      <link>https://jxun-h.github.io/posts/temp/programmers-%EC%99%B8%EB%B2%BD-%EC%A0%90%EA%B2%80-with-python/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/temp/programmers-%EC%99%B8%EB%B2%BD-%EC%A0%90%EA%B2%80-with-python/</guid>
      <description>📌 Programmers 외벽 점검 with Python 💡 조건 외벽의 총 둘레길이 (1 &amp;lt;= n &amp;lt;= 200)
취약 지점의 위치가 담긴 배열 (1&amp;lt; = weak &amp;lt;= 15) 서로 다른 두 취약점의 위치가 같을 경우는 없다. 취약지점의 위치는 오름차순이다. (0 &amp;lt;= weak의 원소 &amp;lt;= n-1) 친구가 1시간 동안 이동할 수 있는 거리 (1&amp;lt;= dist &amp;lt;= 8) 친구들을 최소한으로 투입시켜서 외벽 점검을 해야한다.
만약 친구들이 모두 투입되어도 외벽을 모두 점검할 수 없다면, -1을 출력.</description>
    </item>
    <item>
      <title>[BOJ] 2841 외계인의 기타 연주 with Python</title>
      <link>https://jxun-h.github.io/posts/temp/boj-2841-%EC%99%B8%EA%B3%84%EC%9D%B8%EC%9D%98-%EA%B8%B0%ED%83%80-%EC%97%B0%EC%A3%BC-with-python/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/temp/boj-2841-%EC%99%B8%EA%B3%84%EC%9D%B8%EC%9D%98-%EA%B8%B0%ED%83%80-%EC%97%B0%EC%A3%BC-with-python/</guid>
      <description>📌 BOJ 2841 외계인의 기타 연주 💡 조건 멜로디는 음의 연속이고, 각 음은 줄에서 해당하는 프렛을 누르고 줄을 튕기면 연주할 수 있다. 어떤 줄의 프렛을 여러 개 누르고 있다면, 가장 높은 프렛의 음이 발생. 멜로디에 포함되어 있는 음의 수 N과 한 줄에 있는 프렛의 수 P가 주어진다. (N ≤ 500,000, 2 ≤ P ≤ 300,000) 2번 프렛의 음을 연주하려고 한다면, 5번과 7번을 누르던 손가락을 뗀 다음에 2번 프렛을 누르고 연주해야 한다.</description>
    </item>
    <item>
      <title>[BOJ] 6118 숨바꼭질 with Python</title>
      <link>https://jxun-h.github.io/posts/temp/boj-6118-%EC%88%A8%EB%B0%94%EA%BC%AD%EC%A7%88-with-python/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/temp/boj-6118-%EC%88%A8%EB%B0%94%EA%BC%AD%EC%A7%88-with-python/</guid>
      <description>📌 BOJ 6118 숨바꼭질 💡 조건 헛간의 개수 (2 &amp;lt;= N &amp;lt;= 20,000), 1부터 세아린다. 모든 헛간은 (1&amp;lt;= M &amp;lt;= 50,000)개의 양방향 길로 이어져 있다. 냄새는 1번 헛간에서의 거리가 멀어질수록 감소한다.
거리 = 지나야 하는 길의 최소 개수. 숨어야 하는 가장 거리가 먼 헛간 번호, 가장 거리가 먼 헛간까지의 거리, 가장 거리가 먼 헛간과 같은 거리를 가지는 헛간의 수
를 차례대로 출력하며, 가장 거리가 먼 헛간 번호가 여러개라면 가장 작은 수를 출력한다.</description>
    </item>
    <item>
      <title>[BOJ] 2304 창고 다각형 with Python</title>
      <link>https://jxun-h.github.io/posts/temp/boj-2304-%EC%B0%BD%EA%B3%A0-%EB%8B%A4%EA%B0%81%ED%98%95-with-python/</link>
      <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/temp/boj-2304-%EC%B0%BD%EA%B3%A0-%EB%8B%A4%EA%B0%81%ED%98%95-with-python/</guid>
      <description>📌 BOJ 2304 창고 다각형 💡 조건 기둥의 개수를 나타내는 정수 (1 &amp;lt;= N &amp;lt;= 1000)
각 기둥의 왼쪽 면의 위치를 나타내는 정수 (1 &amp;lt;= L &amp;lt;= 1000)
각 기둥의 높이를 나타내는 정수 (1 &amp;lt;= H &amp;lt;= 1000)
창고 다각형의 면적을 구하는 문제
모든 기둥이 들어가는 창고를 지으려고 할 때, 지붕이 될 수 있는 조건은 아래와 같다.
지붕은 수평 부분과 수직 부분으로 구성되며, 모두 연결되어야 한다. 지붕의 수평 부분은 반드시 어떤 기둥의 윗면과 닿아야 한다.</description>
    </item>
    <item>
      <title>[Programmers] 후보키 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/programmers-%ED%9B%84%EB%B3%B4%ED%82%A4-with-python/</link>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/programmers-%ED%9B%84%EB%B3%B4%ED%82%A4-with-python/</guid>
      <description>📌 Programmers 후보키 with Python 💡 조건 relation 은 2차원 문자열 배열이다.
1 &amp;lt;= relation 의 컬럼의 길이 &amp;lt;= 8
1 &amp;lt;= relation 의 로우의 길이 &amp;lt;= 20
1 &amp;lt;= relation 의 모든 문자열의 길이 &amp;lt;= 8, 알파벳 소문자와 숫자로만 이루어져 있다.
중복되는 튜플은 없다. 학생들의 인적사항이 주어졌을 때, 후보 키의 최대 개수를 구하라.
즉, 학생들을 구별할 수 있는 유일성과 최소성을 지키는 키의 조합의 개수를 구하면 된다. 조합의 개수를 구하는 문제 🔖 예제 및 실행결과 예제 [[&amp;#34;100&amp;#34;,&amp;#34;ryan&amp;#34;,&amp;#34;music&amp;#34;,&amp;#34;2&amp;#34;],[&amp;#34;200&amp;#34;,&amp;#34;apeach&amp;#34;,&amp;#34;math&amp;#34;,&amp;#34;2&amp;#34;],[&amp;#34;300&amp;#34;,&amp;#34;tube&amp;#34;,&amp;#34;computer&amp;#34;,&amp;#34;3&amp;#34;],[&amp;#34;400&amp;#34;,&amp;#34;con&amp;#34;,&amp;#34;computer&amp;#34;,&amp;#34;4&amp;#34;],[&amp;#34;500&amp;#34;,&amp;#34;muzi&amp;#34;,&amp;#34;music&amp;#34;,&amp;#34;3&amp;#34;],[&amp;#34;600&amp;#34;,&amp;#34;apeach&amp;#34;,&amp;#34;music&amp;#34;,&amp;#34;2&amp;#34;]] 실행결과 2 ⌨️ 문제 풀이 row와 column 의 개수를 구해 변수로 둔다.</description>
    </item>
    <item>
      <title>[BOJ] 14725 개미굴 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-14725-%EA%B0%9C%EB%AF%B8%EA%B5%B4-with-python/</link>
      <pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-14725-%EA%B0%9C%EB%AF%B8%EA%B5%B4-with-python/</guid>
      <description>📌 BOJ 14725 개미굴 💡 조건 첫 번째 줄은 로봇 개미가 각 층을 따라 내려오면서 알게 된 먹이의 정보 개수 N &amp;raquo; (1 ≤ N ≤ 1000)
두 번째 줄부터 N+1 번째 줄까지, 각 줄의 시작은 로봇 개미 한마리가 보내준 먹이 정보 개수 K &amp;raquo; (1 ≤ K ≤ 15)
다음 K개의 입력은 로봇 개미가 왼쪽부터 순서대로 각 층마다 지나온 방에 있는 먹이 정보이며 먹이 이름 길이 t &amp;raquo; (1 ≤ t ≤ 15) 트라이(Trie) 자료구조를 사용하는 문제.</description>
    </item>
    <item>
      <title>[Programmers] 오픈채팅방 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/programmers-%EC%98%A4%ED%94%88%EC%B1%84%ED%8C%85%EB%B0%A9-with-python/</link>
      <pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/programmers-%EC%98%A4%ED%94%88%EC%B1%84%ED%8C%85%EB%B0%A9-with-python/</guid>
      <description>📌 Programmers 오픈채팅방 with Python 💡 조건 채팅방에 들어오고 나가거나, 닉네임을 변경한 기록이 담긴 문자열 배열 record
모든 기록이 처리된 후, 최종적으로 방을 개설한 사람이 보게 되는 메시지를 문자열 배열 형태로 return record는 다음과 같은 문자열이 담긴 배열이며, 길이는 1 이상 100,000 이하 모든 유저는 유저 아이디로 구분한다.
유저 아이디 사용자가 닉네임으로 채팅방에 입장 - &amp;quot;Enter 유저 아이디 닉네임&amp;quot; (ex. &amp;quot;Enter uid1234 Muzi&amp;quot;) 구현 유형의 문제 🔖 예제 및 실행결과 예제 record = [&amp;#34;Enter uid1234 Muzi&amp;#34;, &amp;#34;Enter uid4567 Prodo&amp;#34;,&amp;#34;Leave uid1234&amp;#34;,&amp;#34;Enter uid1234 Prodo&amp;#34;,&amp;#34;Change uid4567 Ryan&amp;#34;] 실행결과 [&amp;#34;Prodo님이 들어왔습니다.</description>
    </item>
    <item>
      <title>[BOJ] 13334 철로 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-13334-%EC%B2%A0%EB%A1%9C-with-python/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-13334-%EC%B2%A0%EB%A1%9C-with-python/</guid>
      <description>📌 BOJ 13334 철로 💡 조건 사람 수를 나타내는 양의 정수 n (1 ≤ n ≤ 100,000)
n개의 각 줄에 정수 쌍 (hi, oi)가 주어진다.
−100,000,000 ≤ hi ≤ 100,000,000
−100,000,000 ≤ oi ≤ 100,000,000
oi != hi
철로의 길이를 나타내는 정수 d (1 ≤ d ≤ 200,000,000) 집과 사무실 모두가 철로 길이 안에 들어갈 수 있는 최대의 개수를 구하는 문제. 우선순위 큐, 즉 자료구조를 활용하는 문제. 🔖 예제 및 실행결과 예제 8 5 40 35 25 10 20 10 25 30 50 50 60 30 25 80 100 30 실행결과 4 ⌨️ 문제 풀이 가장 먼저 집과 사무실의 위치를 입력받는데, 그 위치가 정렬이 된 데이터가 아니기에 계산을 용이하도록 하기 위해</description>
    </item>
    <item>
      <title>[BOJ] 1043 거짓말 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-1043-%EA%B1%B0%EC%A7%93%EB%A7%90-with-python/</link>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-1043-%EA%B1%B0%EC%A7%93%EB%A7%90-with-python/</guid>
      <description>📌 BOJ 1043 거짓말 💡 조건 N, M은 50 이하의 자연수 각각 사람의 수, 파티의 수
진실을 아는 사람의 수는 0 이상 50 이하의 정수
각 파티마다 오는 사람의 수는 1 이상 50 이하의 정수 지민이는 모든 파티에 참가해야한다.
지민이는 이야기를 과장되게 한다. 또한 지민이는 거짓말쟁이가 되기 싫다.
이야기의 진실을 아는 사람이 파티에 있으면 과장해서 말할 수 없다. 과장된 이야기를 할 수 있는 파티 개수의 최댓값을 구하는 문제. 자료구조의 활용을 요구하는 유형의 문제 🔖 예제 및 실행결과 예제 4 5 1 1 1 1 1 2 1 3 1 4 2 4 1 실행결과 2 ⌨️ 문제 풀이 cnt라는 리스트에 파티의 수만큼 원소를 만들어주고, 각 값을 1로 둔다.</description>
    </item>
    <item>
      <title>[Programmers] 표 편집 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/programmers-%ED%91%9C-%ED%8E%B8%EC%A7%91-with-python/</link>
      <pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/programmers-%ED%91%9C-%ED%8E%B8%EC%A7%91-with-python/</guid>
      <description>📌 Programmers - 표 편집 💡 조건 및 풀이 표의 원본 행의 개수를 나타내는 변수 n
5 ≤ n ≤ 1,000,000 처음에 선택되어 있는 행의 위치 k
0 ≤ k &amp;lt; n 수행한 명령어들이 담긴 문자열 배열 cmd
1 ≤ cmd의 원소 개수 ≤ 200,000 cmd의 각 원소는 &amp;quot;U X&amp;quot;, &amp;quot;D X&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;Z&amp;quot; 중 하나 Linked List 자료구조 문제 표의 모든 행을 제거하여, 행이 하나도 남지 않는 경우는 입력으로 주어지지 않는다.</description>
    </item>
    <item>
      <title>[Programmers] 순위 검색 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/programmers-%EC%88%9C%EC%9C%84-%EA%B2%80%EC%83%89-with-python/</link>
      <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/programmers-%EC%88%9C%EC%9C%84-%EA%B2%80%EC%83%89-with-python/</guid>
      <description>📌 Programmers - 순위 검색 💡 조건 및 풀이 조건을 만족하는 사람 중 코딩테스트 점수를 X점 이상 받은 사람은 모두 몇 명인가?
를 구하는 문제
&#39;-&#39; 표시는 해당 조건을 고려하지 않겠다는 의미.
&amp;#34;cpp and - and senior and pizza 500&amp;#34; 은를 의미한다.
&amp;quot;cpp로 코딩테스트를 봤으며, 경력은 senior 이면서 소울푸드로 pizza를 선택한 지원자 중 코딩테스트 점수를 500점 이상 받은 사람은 모두 몇 명인가?&amp;quot;
브루트포스 알고리즘 유형의 문제에 해당한다.
🔖 예제 및 실행결과 예제 info = [&amp;#34;java backend junior pizza 150&amp;#34;, &amp;#34;python frontend senior chicken 210&amp;#34;, &amp;#34;python frontend senior chicken 150&amp;#34;,&amp;#34;cpp backend senior pizza 260&amp;#34;, &amp;#34;java backend junior chicken 80&amp;#34;, &amp;#34;python backend senior chicken 50&amp;#34;] query = [&amp;#34;java and backend and junior and pizza 100&amp;#34;, &amp;#34;python and frontend and senior and chicken 200&amp;#34;, &amp;#34;cpp and - and senior and pizza 250&amp;#34;, &amp;#34;- and backend and senior and - 150&amp;#34;, &amp;#34;- and - and - and chicken 100&amp;#34;, &amp;#34;- and - and - and - 150&amp;#34;] 실행결과 [1,1,1,1,2,4] ⌨️ 문제 풀이 info 배열을 순회하며 얻은 데이터를 잘라 배열로 만들고, 그 배열을 각각 데이터와 점수 부분으로 나누어 준다.</description>
    </item>
    <item>
      <title>[BOJ] 5568 카드 놓기 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-5568-%EC%B9%B4%EB%93%9C-%EB%86%93%EA%B8%B0-with-python/</link>
      <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-5568-%EC%B9%B4%EB%93%9C-%EB%86%93%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 5568 카드 놓기 💡 조건 및 풀이 카드의 장수는 4 &amp;lt;= N &amp;lt;= 10 각 카드에 숫자가 적혀있다. 1 &amp;lt;= 숫자 &amp;lt;= 99 N개의 카드 중에서 K개의 카드를 골라서 몇 가지 수를 만들 수 있을까? 브루트포스 유형의 문제 🔖 예제 및 실행결과 예제 6 3 72 2 12 7 2 1 실행결과 68 ⌨️ 문제 풀이 from itertools import permutaions
permutations라는 순열 함수를 사용했다.
리스트와 값을 넣으면 리스트에서 그만큼의 개수대로 숫자를 꺼낸다.</description>
    </item>
    <item>
      <title>[BOJ] 1620 나는야 포켓몬 마스터 이다솜 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-1620-%EB%82%98%EB%8A%94%EC%95%BC-%ED%8F%AC%EC%BC%93%EB%AA%AC-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%9D%B4%EB%8B%A4%EC%86%9C-with-python/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-1620-%EB%82%98%EB%8A%94%EC%95%BC-%ED%8F%AC%EC%BC%93%EB%AA%AC-%EB%A7%88%EC%8A%A4%ED%84%B0-%EC%9D%B4%EB%8B%A4%EC%86%9C-with-python/</guid>
      <description>📌 BOJ 1620 나는야 포켓몬 마스터 이다솜 💡 조건 및 풀이 도감에 수록되어 있는 포켓몬의 수 N, 맞추어야할 문제의 개수 M 범위는 1 &amp;lt;= N, M &amp;lt;= 100000 이다. 자료구조를 이용하는 문제 문자열로 입력이 들어오면 도감에 수록된 포켓몬의 번호를 출력한다. 숫자로 입력이 들어오면 도감에 수록된 포켓몬의 이름을 출력한다. 🔖 예제 및 실행결과 예제 26 5 Bulbasaur Ivysaur Venusaur Charmander Charmeleon Charizard Squirtle Wartortle Blastoise Caterpie Metapod Butterfree Weedle Kakuna Beedrill Pidgey Pidgeotto Pidgeot Rattata Raticate Spearow Fearow Ekans Arbok Pikachu Raichu 25 Raichu 3 Pidgey Kakuna 실행결과 Pikachu 26 Venusaur 16 14 ⌨️ 문제 풀이 key - value 로 매핑되는 자료구조를 사용한다.</description>
    </item>
    <item>
      <title>[Programmers] 수식최대화 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/programmers-%EC%88%98%EC%8B%9D-%EC%B5%9C%EB%8C%80%ED%99%94-with-python/</link>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/programmers-%EC%88%98%EC%8B%9D-%EC%B5%9C%EB%8C%80%ED%99%94-with-python/</guid>
      <description>📌 Programmers - 수식 최대화 💡 조건 및 풀이 계산 가능한 수식이 있는 expression 이 주어지며, 길이가 3이상 100이하인 문자열. 연산자는 +, -, * 만 있다. 피연산자는 0 이상 999 이하다. 같은 연산자는 앞에 있는 것이 더 우선순위가 높다. 연산자의 우선순위를 정해서 그것 먼저 계산해주면 된다. 계산된 음수는 양수로 바꾸어서 최댓값 계산을 한다. 🔖 예제 및 실행결과 예제 expression = &amp;#34;100-200*300-500+20&amp;#34; expression = &amp;#34;50*6-3*2&amp;#34; 실행결과 60420 300 ⌨️ 문제 풀이 답으로 반환할 answer를 -1e9로 초기화한다.</description>
    </item>
  </channel>
</rss>
