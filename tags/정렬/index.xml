<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>정렬 on Jxun-h Dev Log</title>
    <link>https://jxun-h.github.io/tags/%EC%A0%95%EB%A0%AC/</link>
    <description>Recent content in 정렬 on Jxun-h Dev Log</description>
    <image>
      <title>Jxun-h Dev Log</title>
      <url>https://jxun-h.github.io/images/papermod-cover.png</url>
      <link>https://jxun-h.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Mar 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jxun-h.github.io/tags/%EC%A0%95%EB%A0%AC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[BOJ] 1758 알바생 강호 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-1758-%EC%95%8C%EB%B0%94%EC%83%9D-%EA%B0%95%ED%98%B8-with-python/</link>
      <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-1758-%EC%95%8C%EB%B0%94%EC%83%9D-%EA%B0%95%ED%98%B8-with-python/</guid>
      <description>📌 BOJ 1758 알바생 강호 💡 조건 손님들은 입구에 들어갈 때, 강호에게 팁을 준다. 손님들은 자기가 커피를 몇 번째 받는지에 따라 팁을 다른 액수로 강호에게 준다. 각 손님은 강호에게 원래 주려고 생각했던 돈 - (받은 등수 - 1) 만큼의 팁을 강호에게 준다. 만약, 위의 식으로 나온 값이 음수라면, 강호는 팁을 받을 수 없다. 사람의 수 N과, 각 사람이 주려고 생각하는 팁이 주어질 때, 손님의 순서를 적절히 바꿔 강호가 받을 수 잇는 팁의 최댓값을 구하는 문제 N은 100,000보다 작거나 같은 자연수이다.</description>
    </item>
    <item>
      <title>[BOJ] 12760 최 with Python</title>
      <link>https://jxun-h.github.io/posts/temp/temp/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/temp/temp/</guid>
      <description>
📌 BOJ 12760 최 </description>
    </item>
    <item>
      <title>[BOJ] 12760 최후의 승자는 누구? with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-12760-%EC%B5%9C%ED%9B%84%EC%9D%98-%EC%8A%B9%EC%9E%90%EB%8A%94-%EB%88%84%EA%B5%AC-with-python/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-12760-%EC%B5%9C%ED%9B%84%EC%9D%98-%EC%8A%B9%EC%9E%90%EB%8A%94-%EB%88%84%EA%B5%AC-with-python/</guid>
      <description>📌 BOJ 12760 최후의 승자는 누구? 💡 조건 최종 플레이어 N명이 남아있다. 각 플레이어는 M장씩의 숫자가 적힌 카드를 가지고 있으며,
이들은 매 턴 자신이 가진 카드 중 가장 큰 카드를 두고 비교를 하는데, 그 카드들 중 가장 큰 수를 가진 플레이어가 1점을 획득한다. 그 턴에 사용된 카드는 버리기로 한다. (가장 큰 수를 가진 플레이어는 여러 명일 수 있다.) 3. M번의 경기 후 가장 많은 점수를 획득한 플레이어는 몇 번 플레이어인지 구하는 문제.</description>
    </item>
    <item>
      <title>[BOJ] 12018 Yonsei TOTO with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-12018-yonsei-toto-with-python/</link>
      <pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-12018-yonsei-toto-with-python/</guid>
      <description>📌 BOJ 12018 Yonsei TOTO 💡 조건 각각의 학생들에게 마일리지를 주어 듣고 싶은 과목에 마일리지를 과목당 1~36을 분배한다.
그리고 모두 분배가 끝이 나면 과목에 대해서 마일리지를 많이 투자한 순으로 그 과목의 수강인원만큼 신청되는 방식이다. 성준이는 주어진 마일리지로 최대한 많은 과목을 신청하고 싶어 한다.
(내가 마일리지를 넣고 이후에 과목을 신청하는 사람은 없다) 마일리지는 한 과목에 1에서 36까지 넣을 수 있다. 과목 수 n (1 ≤ n ≤ 100)
마일리지 m (1 ≤ m ≤ 100)</description>
    </item>
    <item>
      <title>[BOJ] 1755 숫자놀이 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-1755-%EC%88%AB%EC%9E%90%EB%86%80%EC%9D%B4-with-python/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-1755-%EC%88%AB%EC%9E%90%EB%86%80%EC%9D%B4-with-python/</guid>
      <description>📌 BOJ 1755 숫자놀이 💡 조건 79를 영어로 읽되 숫자 단위로 하나씩 읽는다면 &amp;ldquo;seven nine&amp;quot;이 된다. 80은 마찬가지로 &amp;ldquo;eight zero&amp;quot;라고 읽는다. 79는 80보다 작지만, 영어로 숫자 하나씩 읽는다면 &amp;ldquo;eight zero&amp;quot;가 &amp;ldquo;seven nine&amp;quot;보다 사전순으로 먼저 온다. 문제는 정수 M, N(1 ≤ M ≤ N ≤ 99)이 주어지면 M 이상 N 이하의 정수를 숫자 하나씩 읽었을 때를 기준으로 사전순으로 정렬하여 출력하는 것. M 이상 N 이하의 정수를 문제 조건에 맞게 정렬하여 한 줄에 10개씩 출력한다.</description>
    </item>
    <item>
      <title>[BOJ] 2075 N번째 큰 수 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-2075-n%EB%B2%88%EC%A7%B8-%ED%81%B0-%EC%88%98-with-python/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-2075-n%EB%B2%88%EC%A7%B8-%ED%81%B0-%EC%88%98-with-python/</guid>
      <description>📌 BOJ 2075 N번째 큰 수 💡 조건 N×N의 표에 수 N2개 채워져 있다. 채워진 수에는 한 가지 특징이 있는데,
모든 수는 자신의 한 칸 위에 있는 수보다 크다는 것이다. 표에 채워진 수는 모두 다르다. N(1 ≤ N ≤ 1,500) 표에 적힌 수는 -10억보다 크거나 같고, 10억보다 작거나 같은 정수이다. 자료구조 응용, 우선순위 큐 활용, 정렬 유형의 문제 🔖 예제 및 실행결과 예제 5 12 7 9 15 5 13 8 11 19 6 21 10 26 31 16 48 14 28 35 25 52 20 32 41 49 실행결과 35 ⌨️ 문제 풀이 q 라는 리스트를 만든다.</description>
    </item>
    <item>
      <title>[BOJ] 2535 아시아 정보올림피아드 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-2535-%EC%95%84%EC%8B%9C%EC%95%84-%EC%A0%95%EB%B3%B4%EC%98%AC%EB%A6%BC%ED%94%BC%EC%95%84%EB%93%9C-with-python/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-2535-%EC%95%84%EC%8B%9C%EC%95%84-%EC%A0%95%EB%B3%B4%EC%98%AC%EB%A6%BC%ED%94%BC%EC%95%84%EB%93%9C-with-python/</guid>
      <description>📌 BOJ 2535 아시아 정보올림피아드 💡 조건 대회참가 학생 수를 나타내는 N, 3 ≤ N ≤ 100. N개의 줄에는 각 줄마다 한 학생의 소속 국가 번호, 학생 번호, 그리고 성적이 하나의 빈칸을 사이에 두고 주어진다. 국가 번호는 1부터 순서대로 하나의 정수로 주어지며, 각 학생번호는 각 나라별로 1부터 순서대로 하나의 정수로 주어진다. 점수는 0 이상 1000 이하의 정수이고, 동점자는 없다고 가정한다. 정렬, 구현유형의 문제. 🔖 예제 및 실행결과 예제 9 1 1 230 1 2 210 1 3 205 2 1 100 2 2 150 3 1 175 3 2 190 3 3 180 3 4 195 실행결과 1 1 1 2 3 4 ⌨️ 문제 풀이 입력을 받아 리스트에 저장할 때, 점수, 참가국, 학생번호 순으로 저장한다.</description>
    </item>
    <item>
      <title>[BOJ] 1940 주몽 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-1940-%EC%A3%BC%EB%AA%BD-with-python/</link>
      <pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-1940-%EC%A3%BC%EB%AA%BD-with-python/</guid>
      <description>📌 BOJ 1940 주몽 💡 조건 갑옷은 두 개의 재료로 만드는데 두 재료의 고유한 번호를 합쳐서 M(1 ≤ M ≤ 10,000,000)이 되면 갑옷이 만들어 지게 된다. N(1 ≤ N ≤ 15,000) 개의 재료와 M이 주어졌을 때 몇 개의 갑옷을 만들 수 있는지를 구하는 문제 정렬, 투 포인터 유형의 문제 🔖 예제 및 실행결과 예제 6 9 2 7 4 1 5 3 실행결과 2 ⌨️ 문제 풀이 정렬을 해서 투포인터를 사용해 문제를 푸는 것이 이 문제의 요점인 것 같다.</description>
    </item>
    <item>
      <title>[BOJ] 1026 보물 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-1026-%EB%B3%B4%EB%AC%BC-with-python/</link>
      <pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-1026-%EB%B3%B4%EB%AC%BC-with-python/</guid>
      <description>📌 BOJ 1026 보물 💡 조건 길이가 N인 정수 배열 A와 B가 있다. 다음과 같이 함수 S를 정의하자. S = A[0] × B[0] + ... + A[N-1] × B[N-1] S의 값을 가장 작게 만들기 위해 A의 수를 재배열하자. 단, B에 있는 수는 재배열하면 안 된다. N은 50보다 작거나 같은 자연수이고, A와 B의 각 원소는 100보다 작거나 같은 음이 아닌 정수이다. 정렬, 사칙연산 유형의 문제 🔖 예제 및 실행결과 예제 5 1 1 1 6 0 2 7 8 3 1 실행결과 18 ⌨️ 문제 풀이 가장 큰 수와 가장 작은 수를 곱하여 더하면 최솟값이 나온다.</description>
    </item>
    <item>
      <title>[Programmers] 메뉴 리뉴얼 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/programmers-%EB%A9%94%EB%89%B4-%EB%A6%AC%EB%89%B4%EC%96%BC-with-python/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/programmers-%EB%A9%94%EB%89%B4-%EB%A6%AC%EB%89%B4%EC%96%BC-with-python/</guid>
      <description>📌 Programmers - 메뉴 리뉴얼 💡 조건 및 풀이 orders 배열의 크기는 2 이상 20 이하. orders 배열의 각 원소는 크기가 2 이상 10 이하인 문자열.
각 문자열은 알파벳 대문자로만 이루어져 있으며 중복은 허용 안함. course 배열의 크기는 1 이상 10 이하.
course 배열의 각 원소는 2 이상 10 이하인 자연수가 오름차순으로 정렬 정답은 각 코스요리 메뉴의 구성을 문자열 형식으로 배열에 담아 사전 순으로 오름차순 정렬해서 return
배열의 각 원소에 저장된 문자열 또한 알파벳 오름차순으로 정렬</description>
    </item>
    <item>
      <title>[BOJ] 3273 두 수의 합 with Python</title>
      <link>https://jxun-h.github.io/posts/ps/boj-3273-%EB%91%90-%EC%88%98%EC%9D%98-%ED%95%A9-with-python/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/ps/boj-3273-%EB%91%90-%EC%88%98%EC%9D%98-%ED%95%A9-with-python/</guid>
      <description>📌 BOJ 3273 두 수의 합 💡 조건 및 풀이 n개의 서로 다른 정수로 이루어진 수열 A가 있다. 1 &amp;lt;= A[i] &amp;lt;= 1000000 n의 크기는 1 &amp;lt;= n &amp;lt;= 100000 x의 크기는 1 &amp;lt;= x &amp;lt;= 2000000 sort + binary search 유형의 문제 자연수 x가 주어졌을 때, A[i] + A[j] = x 를 만족하는 쌍의 수를 구한다.
(A[i], A[j]) 🔖 예제 및 실행결과 예제 9 5 12 7 10 9 1 2 3 11 13 실행결과 3 ⌨️ 문제 풀이 Python 언어의 배열 이진 분할 알고리즘을 사용할 수 있는 bisect 사용.</description>
    </item>
  </channel>
</rss>
