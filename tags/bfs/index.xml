<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BFS on Jxun-h Dev Log</title>
    <link>https://jxun-h.github.io/tags/bfs/</link>
    <description>Recent content in BFS on Jxun-h Dev Log</description>
    <image>
      <title>Jxun-h Dev Log</title>
      <url>https://jxun-h.github.io/images/papermod-cover.png</url>
      <link>https://jxun-h.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 Jul 2022 22:33:00 +0000</lastBuildDate>
    <atom:link href="https://jxun-h.github.io/tags/bfs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[BOJ] 1005 ACM Craft with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1005-acm-craft-with-python/</link>
      <pubDate>Sun, 17 Jul 2022 22:33:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1005-acm-craft-with-python/</guid>
      <description>📌 BOJ 1005 ACM Craft 💡 조건 서기 2012년! 드디어 2년간 수많은 국민들을 기다리게 한 게임 ACM Craft (Association of Construction Manager Craft)가 발매되었다.
이 게임은 지금까지 나온 게임들과는 다르게 ACM크래프트는 다이나믹한 게임 진행을 위해 건물을 짓는 순서가 정해져 있지 않다.
즉, 첫 번째 게임과 두 번째 게임이 건물을 짓는 순서가 다를 수도 있다.
매 게임시작 시 건물을 짓는 순서가 주어진다. 또한 모든 건물은 각각 건설을 시작하여 완성이 될 때까지 Delay가 존재한다.</description>
    </item>
    <item>
      <title>[BOJ] 1939 중량제한 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1939-%EC%A4%91%EB%9F%89%EC%A0%9C%ED%95%9C-with-python/</link>
      <pubDate>Tue, 12 Jul 2022 15:12:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1939-%EC%A4%91%EB%9F%89%EC%A0%9C%ED%95%9C-with-python/</guid>
      <description>📌 BOJ 1939 중량제한 💡 조건 N(2 ≤ N ≤ 10,000)개의 섬으로 이루어진 나라가 있다. 이들 중 몇 개의 섬 사이에는 다리가 설치되어 있어서 차들이 다닐 수 있다.
영식 중공업에서는 두 개의 섬에 공장을 세워 두고 물품을 생산하는 일을 하고 있다.
물품을 생산하다 보면 공장에서 다른 공장으로 생산 중이던 물품을 수송해야 할 일이 생기곤 한다.
그런데 각각의 다리마다 중량제한이 있기 때문에 무턱대고 물품을 옮길 순 없다.
만약 중량제한을 초과하는 양의 물품이 다리를 지나게 되면 다리가 무너지게 된다.</description>
    </item>
    <item>
      <title>[BOJ] 1068 트리 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1068-%ED%8A%B8%EB%A6%AC-with-python/</link>
      <pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1068-%ED%8A%B8%EB%A6%AC-with-python/</guid>
      <description>📌 BOJ 1068 트리 💡 조건 트리에서 리프 노드란, 자식의 개수가 0인 노드를 말한다.
트리가 주어졌을 때, 노드 하나를 지울 것이다. 그 때, 남은 트리에서 리프 노드의 개수를 구하는 문제.
노드를 지우면 그 노드와 노드의 모든 자손이 트리에서 제거된다.
다음과 같은 트리가 있다고 하자.
현재 리프 노드의 개수는 3개이다. (초록색 색칠된 노드) 이때, 1번을 지우면, 다음과 같이 변한다.
검정색으로 색칠된 노드가 트리에서 제거된 노드이다.
이제 리프 노드의 개수는 1개이다.</description>
    </item>
    <item>
      <title>[BOJ] 10451 순열 사이클 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-10451-%EC%88%9C%EC%97%B4-%EC%82%AC%EC%9D%B4%ED%81%B4-with-python/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-10451-%EC%88%9C%EC%97%B4-%EC%82%AC%EC%9D%B4%ED%81%B4-with-python/</guid>
      <description>📌 BOJ 10451 순열 사이클 💡 조건 1부터 N까지 정수 N개로 이루어진 순열을 나타내는 방법은 여러 가지가 있다.
순열 그래프 (3, 2, 7, 8, 1, 4, 5, 6) 에는 총 3개의 사이클이 있다. 이러한 사이클을 &amp;ldquo;순열 사이클&amp;rdquo; 이라고 한다.
N개의 정수로 이루어진 순열이 주어졌을 때, 순열 사이클의 개수를 구하는 프로그램을 작성하시오.
첫째 줄에 테스트 케이스의 개수 T가 주어진다.
각 테스트 케이스의 첫째 줄에는 순열의 크기 N (2 ≤ N ≤ 1,000)이 주어진다.</description>
    </item>
    <item>
      <title>[BOJ] 1525 퍼즐 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1525-%ED%8D%BC%EC%A6%90-with-python/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1525-%ED%8D%BC%EC%A6%90-with-python/</guid>
      <description>📌 BOJ 1525 퍼즐 💡 조건 3×3 표에 다음과 같이 수가 채워져 있다. 오른쪽 아래 가장 끝 칸은 비어 있는 칸이다.
1 2 3 4 5 6 7 8 9 어떤 수와 인접해 있는 네 개의 칸 중에 하나가 비어 있으면, 수를 그 칸으로 이동시킬 수가 있다.
물론 표 바깥으로 나가는 경우는 불가능하다.
우리의 목표는 초기 상태가 주어졌을 때, 최소의 이동으로 위와 같은 정리된 상태를 만드는 것이다. 다음의 예를 보자.</description>
    </item>
    <item>
      <title>[BOJ] 2644 촌수계산 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-2644-%EC%B4%8C%EC%88%98%EA%B3%84%EC%82%B0-with-python/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-2644-%EC%B4%8C%EC%88%98%EA%B3%84%EC%82%B0-with-python/</guid>
      <description>📌 BOJ 2644 촌수계산 💡 조건 기본적으로 부모와 자식 사이를 1촌으로 정의하고 이로부터 사람들 간의 촌수를 계산한다.
아버지와 할아버지는 각각 1촌으로 나와 할아버지는 2촌이 되고, 아버지 형제들과 할아버지는 1촌, 나와 아버지 형제들과는 3촌이 된다.
여러 사람들에 대한 부모 자식들 간의 관계가 주어졌을 때, 주어진 두 사람의 촌수를 계산하는 프로그램을 작성하시오.
사람들은 1, 2, 3, …, n (1 ≤ n ≤ 100)의 연속된 번호로 각각 표시된다.
입력 파일의 첫째 줄에는 전체 사람의 수 n이 주어지고, 둘째 줄에는 촌수를 계산해야 하는 서로 다른 두 사람의 번호가 주어진다.</description>
    </item>
    <item>
      <title>[BOJ] 13459 구슬 탈출 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-13459-%EA%B5%AC%EC%8A%AC-%ED%83%88%EC%B6%9C-with-python/</link>
      <pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-13459-%EA%B5%AC%EC%8A%AC-%ED%83%88%EC%B6%9C-with-python/</guid>
      <description>📌 BOJ 13459 구슬 탈출 💡 조건 구슬 탈출은 직사각형 보드에 빨간 구슬과 파란 구슬을 하나씩 넣은 다음, 빨간 구슬을 구멍을 통해 빼내는 게임이다.
보드의 세로 크기는 N, 가로 크기는 M이고, 편의상 1×1크기의 칸으로 나누어져 있다.
N, M (3 ≤ N, M ≤ 10)
가장 바깥 행과 열은 모두 막혀져 있고, 보드에는 구멍이 하나 있다.
빨간 구슬과 파란 구슬의 크기는 보드에서 1×1크기의 칸을 가득 채우는 사이즈이고, 각각 하나씩 들어가 있다.</description>
    </item>
    <item>
      <title>[BOJ] 17204 죽음의 게임 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-17204-%EC%A3%BD%EC%9D%8C%EC%9D%98-%EA%B2%8C%EC%9E%84-with-python/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-17204-%EC%A3%BD%EC%9D%8C%EC%9D%98-%EA%B2%8C%EC%9E%84-with-python/</guid>
      <description>📌 BOJ 17204 죽음의 게임 💡 조건 게임에 참여하는 N명의 사람들은 원탁에 둘러앉게 된다.
N(3 ≤ N ≤ 150)
게임을 시작하는 사람은 0번, 그 오른쪽 사람은 1번, 그 오른쪽은 2번, N-1번의 오른쪽 사람은 다시 0번이 된다.
게임 참여자들간에 지목을 완료한 상태가 주어질때, 보성이가 벌주를 마시기 위해 록 하자.
영기가 불러야 하는 가장 작은 양의 정수 M을 보성이 몰래 귀띔해 주도록 하자.
보성이의 번호 K(1 ≤ K ≤ N - 1)</description>
    </item>
    <item>
      <title>[BOJ] 18004 From A to B with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-18004-from-a-to-b-with-python/</link>
      <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-18004-from-a-to-b-with-python/</guid>
      <description>📌 BOJ 18004 From A to B 💡 조건 두 개의 정수인 a와 b가 입력된다. 일련의 작업을 수행하여 a를 b로 만들려고 한다. 다음의 두가지 작업만 할 수 있다. 짝수인 경우에만 2로 나누기. 1 더하기 (1 ≤ a , b ≤ 10 9 ) a 를 b 로 변환하는 데 필요한 주어진 연산의 최소 횟수를 출력하는 문제 수학, 그리디 알고리즘, BFS 유형의 문제 🔖 예제 및 실행결과 예제 103 27 실행결과 4 ⌨️ 문제 풀이 a 와 b 정수를 입력받고, a 를 b로 만드는 문제이다.</description>
    </item>
    <item>
      <title>[BOJ] 17839 Baba is Rabbit with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-17839-baba-is-rabbit-with-python/</link>
      <pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-17839-baba-is-rabbit-with-python/</guid>
      <description>📌 BOJ 17839 Baba is Rabbit 💡 조건 N(1 ≤ N ≤ 100,000) N개의 줄에 걸쳐 명령이 주어진다.
각 명령은 p is q의 형태로 주어지며, p와 q는 첫 글자가 영문 대문자이고, 나머지 글자는 영문 소문자인 길이 10 이내의 문자열이다. Baba에 명령을 한 번 이상 적용한 결과로 나올 수 있는 사물을 사전순으로 출력한다.
단, 적용할 수 있는 명령이 없다면, 아무것도 출력하지 않는다. 그래프 탐색, BFS 유형의 문제 🔖 예제 및 실행결과 예제 1 1 Rabbit is Carrot 실행결과 1 예제 2 3 Rabbit is Carrot Baba is Cat Cat is Rabbit 실행결과 2 Carrot Cat Rabbit ⌨️ 문제 풀이 Baba에 명령을 한 번 이상 적용한 결과로 나올 수 있는 결과를 뽑아야하는 문제이다.</description>
    </item>
    <item>
      <title>[BOJ] 2636 치즈 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-2636-%EC%B9%98%EC%A6%88-with-python/</link>
      <pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-2636-%EC%B9%98%EC%A6%88-with-python/</guid>
      <description>📌 BOJ 2636 치즈 💡 조건 정사각형 칸들로 이루어진 사각형 모양의 판이 있고, 그 위에 얇은 치즈가 놓여 있다. 치즈를 공기 중에 놓으면 녹게 되는데 공기와 접촉된 칸은 한 시간이 지나면 녹아 없어진다.
치즈의 구멍 속에는 공기가 없지만 구멍을 둘러싼 치즈가 녹아서 구멍이 열리면 구멍 속으로 공기가 들어가게 된다. 입력으로 사각형 모양의 판의 크기와 한 조각의 치즈가 판 위에 주어졌을 때,
공기 중에서 치즈가 모두 녹아 없어지는 데 걸리는 시간과 모두 녹기 한 시간 전에 남아있는 치즈조각이 놓여 있는 칸의 개수를 구하는 문제 세로와 가로의 길이는 최대 100이다.</description>
    </item>
    <item>
      <title>[BOJ] 3187 양치기 꿍 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-3187-%EC%96%91%EC%B9%98%EA%B8%B0-%EA%BF%8D-with-python/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-3187-%EC%96%91%EC%B9%98%EA%B8%B0-%EA%BF%8D-with-python/</guid>
      <description>📌 BOJ 3187 양치기 꿍 💡 조건 같은 울타리 영역 안의 양들의 숫자가 늑대의 숫자보다 더 많을 경우 늑대가 전부 잡아먹힌다. 물론 그 외의 경우는 양이 전부 잡아먹힌다. 만약 빈 공간을 &amp;lsquo;.&amp;rsquo;(점)으로 나타내고 울타리를 &amp;lsquo;#&amp;rsquo;, 늑대를 &amp;lsquo;v&amp;rsquo;, 양을 &amp;lsquo;k&amp;rsquo;라고 나타낸다면 몇마리의 양과 늑대가 남아있는가? 울타리로 막히지 않은 영역에는 양과 늑대가 없으며 양과 늑대는 대각선으로 이동할 수 없다. 영역의 세로와 가로의 길이를 나타내는 두 개의 정수 R, C (3 ≤ R, C ≤ 250) BFS 유형의 문제 🔖 예제 및 실행결과 예제 6 6 .</description>
    </item>
    <item>
      <title>[BOJ] 18243 Small World Network with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-18243-small-world-network-with-python/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-18243-small-world-network-with-python/</guid>
      <description>📌 BOJ 18243 Small World Network 💡 조건 첫 번째 줄에 지구에 있는 사람의 수 N과 친구 관계의 개수 K.
(1 ≤ N ≤ 100, 0 ≤ K ≤ N×(N-1)/2) 모든 사람은 1부터 N까지 번호가 매겨져 있다. 두 번째 줄부터 K+1번째 줄까지 친구 관계를 나타내는 A B가 한 줄에 하나씩 주어진다.
(1 ≤ A, B ≤ N) A와 B가 친구면 B와 A도 친구다. 자기 자신과 친구인 경우는 없다.
A와 B의 친구 관계는 중복되어 입력되지 않는다.</description>
    </item>
    <item>
      <title>[BOJ] 13565 침투 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-13565-%EC%B9%A8%ED%88%AC-with-python/</link>
      <pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-13565-%EC%B9%A8%ED%88%AC-with-python/</guid>
      <description>📌 BOJ 13565 침투 💡 조건 격자의 크기를 나타내는 M (2 ≤ M ≤ 1,000) 과 N (2 ≤ N ≤ 1,000) M줄에 걸쳐서, N개의 0 또는 1 이 공백 없이 주어진다. 0은 전류가 잘 통하는 흰색, 1은 전류가 통하지 않는 검은색 격자임을 뜻한다. 맨 윗줄에서 받은 전기가 맨 밑 줄까지 갈 수 있다면 True, 아니면 False BFS 유형의 문제 🔖 예제 및 실행결과 예제 5 6 010101 010000 011101 100011 001011 실행결과 NO ⌨️ 문제 풀이 전류판을 board 리스트에 입력받아 저장합니다.</description>
    </item>
    <item>
      <title>[BOJ] 16234 인구 이동 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-16234-%EC%9D%B8%EA%B5%AC-%EC%9D%B4%EB%8F%99-with-python/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-16234-%EC%9D%B8%EA%B5%AC-%EC%9D%B4%EB%8F%99-with-python/</guid>
      <description>📌 BOJ 16234 인구 이동 💡 조건 N×N크기의 땅이 있고, 땅은 1×1개의 칸으로 나누어져 있다.
N, L, R이 주어진다. (1 ≤ N ≤ 50, 1 ≤ L ≤ R ≤ 100) 인구 이동은 하루 동안 다음과 같이 진행되고, 더 이상 아래 방법에 의해 인구 이동이 없을 때까지 지속된다. 국경선을 공유하는 두 나라의 인구 차이가 L명 이상, R명 이하라면, 두 나라가 공유하는 국경선을 오늘 하루 동안 연다. 위의 조건에 의해 열어야하는 국경선이 모두 열렸다면, 인구 이동을 시작한다.</description>
    </item>
    <item>
      <title>[BOJ] 14502 연구소 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-14502-%EC%97%B0%EA%B5%AC%EC%86%8C-with-python/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-14502-%EC%97%B0%EA%B5%AC%EC%86%8C-with-python/</guid>
      <description>📌 BOJ 14502 연구소 💡 조건 연구소는 크기가 N×M인 직사각형으로 나타낼 수 있으며, 직사각형은 1×1 크기의 정사각형으로 나누어져 있다. 새로 세울 수 있는 벽의 개수는 3개이며, 꼭 3개를 세워야 한다. 벽을 3개 세운 뒤, 바이러스가 퍼질 수 없는 곳을 안전 영역이라고 한다. 지도의 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 8) 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 위치이다. 2의 개수는 2보다 크거나 같고, 10보다 작거나 같은 자연수이다.</description>
    </item>
    <item>
      <title>[BOJ] 6118 숨바꼭질 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-6118-%EC%88%A8%EB%B0%94%EA%BC%AD%EC%A7%88-with-python/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-6118-%EC%88%A8%EB%B0%94%EA%BC%AD%EC%A7%88-with-python/</guid>
      <description>📌 BOJ 6118 숨바꼭질 💡 조건 헛간의 개수 (2 &amp;lt;= N &amp;lt;= 20,000), 1부터 세아린다. 모든 헛간은 (1&amp;lt;= M &amp;lt;= 50,000)개의 양방향 길로 이어져 있다. 냄새는 1번 헛간에서의 거리가 멀어질수록 감소한다.
거리 = 지나야 하는 길의 최소 개수. 숨어야 하는 가장 거리가 먼 헛간 번호, 가장 거리가 먼 헛간까지의 거리, 가장 거리가 먼 헛간과 같은 거리를 가지는 헛간의 수
를 차례대로 출력하며, 가장 거리가 먼 헛간 번호가 여러개라면 가장 작은 수를 출력한다.</description>
    </item>
    <item>
      <title>[BOJ] 3184 양 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-3184-%EC%96%91-with-python/</link>
      <pubDate>Tue, 19 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-3184-%EC%96%91-with-python/</guid>
      <description>📌 BOJ 3184 양 💡 조건 R과 C가 주어지며(3 ≤ R, C ≤ 250), 각 수는 마당의 행과 열의 수를 의미한다.
R개의 줄은 C개의 글자를 가진다. 이들은 마당의 구조(울타리, 양, 늑대의 위치)를 의미한다. 글자 &#39;.&#39; (점)은 빈 필드를 의미하며, 글자 &#39;#&#39;는 울타리를, &#39;o&#39;는 양, &#39;v&#39;는 늑대를 의미한다. 한 칸에서 수평, 수직만으로 이동할수 있다.
영역 안의 양의 수가 늑대의 수보다 많다면 이기고, 늑대가 많으면 양은 사라진다. 넓이 우선 탐색(BFS) 알고리즘 유형의 문제 🔖 예제 및 실행결과 예제 6 6 .</description>
    </item>
    <item>
      <title>[BOJ] 1967 트리의 지름 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-1967-%ED%8A%B8%EB%A6%AC%EC%9D%98-%EC%A7%80%EB%A6%84-with-python/</link>
      <pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-1967-%ED%8A%B8%EB%A6%AC%EC%9D%98-%EC%A7%80%EB%A6%84-with-python/</guid>
      <description>📌 BOJ 1967 트리의 지름 💡 조건 및 풀이 노드의 개수 (1 ≤ n ≤ 10,000) 첫 번째 정수는 간선이 연결하는 두 노드 중 부모 노드의 번호
두 번째 정수는 자식 노드
세 번째 정수는 간선의 가중치 부모 노드의 번호가 작은 것이 먼저 입력되고,
부모 노드의 번호가 같으면 자식 노드의 번호가 작은 것이 먼저 입력된다. BFS 유형의 문제 루트 노드의 번호는 항상 1
간선의 가중치는 100보다 크지 않은 양의 정수 트리에 존재하는 모든 경로들 중, 가장 긴 경로를 출력하는 문제이다.</description>
    </item>
    <item>
      <title>[BOJ] 18352 특정 거리의 도시 찾기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-18352-%ED%8A%B9%EC%A0%95-%EA%B1%B0%EB%A6%AC%EC%9D%98-%EB%8F%84%EC%8B%9C-%EC%B0%BE%EA%B8%B0-with-python/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-18352-%ED%8A%B9%EC%A0%95-%EA%B1%B0%EB%A6%AC%EC%9D%98-%EB%8F%84%EC%8B%9C-%EC%B0%BE%EA%B8%B0-with-python/</guid>
      <description>📌 BOJ 18352 특정 거리의 도시 찾기 💡 조건 및 풀이 1번부터 N번까지의 도시와 M개의 단방향 도로가 존재. 모든 도로의 거리는 1. 특정한 도시 X로부터 출발하여 도달할 수 있는 모든 도시 중에서, 최단 거리가 정확히 K인 모든 도시들의 번호를 출력. BFS 유형의 문제 도달할 수 있는 도시 중에서, 최단 거리가 K인 도시가 하나도 존재하지 않으면 -1을 출력 🔖 예제 및 실행결과 예제 4 4 2 1 1 2 1 3 2 3 2 4 실행결과 4 ⌨️ 문제 풀이 모든 도시가 1부터 시작하기 때문에 graph 리스트의 길이를 n + 1로 한다.</description>
    </item>
    <item>
      <title>[Programmers] 거리두기 확인하기 with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/programmers-%EA%B1%B0%EB%A6%AC%EB%91%90%EA%B8%B0-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0-with-python/</link>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/programmers-%EA%B1%B0%EB%A6%AC%EB%91%90%EA%B8%B0-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0-with-python/</guid>
      <description>📌 Programmers - 거리두기 확인하기 💡 조건 및 풀이 대기실에 응시자들이 면접을 위해 대기를 하고 있다. 대기실에 있는 대기자들이 거리 두기를 잘 지키고 있을까? 대기실은 5개, 각 대기실은 5 * 5의 크기입니다. 응시자들 간의 거리는 맨해튼 거리는 2 이하로 앉을 수 없으니 3 이상이어야한다. 맨해튼 거리가 2이하여도 응시자 사이에 파티션으로 막혀 있으며 지나갈 다른 방법으로 응시자로의 경로가 없다면 상관이 없다. BFS 유형의 문제 두 테이블 T1, T2가 행렬 (r1, c1), (r2, c2)에 각각 위치하고 있다면,</description>
    </item>
    <item>
      <title>[BOJ] 4179 불! with Python</title>
      <link>https://jxun-h.github.io/posts/problem-solving/boj-4179-%EB%B6%88-with-python/</link>
      <pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://jxun-h.github.io/posts/problem-solving/boj-4179-%EB%B6%88-with-python/</guid>
      <description>📌 BOJ 4179 불! 💡 조건 및 풀이 R * C 크기의 배열을 입력받아 지훈이가 미로에서 탈출 할 수 있는지 구하는 문제. R * C 크기의 배열은 최대 1000 * 1000 BFS 유형의 문제 미로의 벽에 붙어있으면 탈출이 가능하다. 불을 먼저 지른 후, 지훈이의 이동 가능 경로를 살핀다. 방문처리를 통해 한 번 갔던 곳은 다시 가지 않는다. 🔖 예제 및 실행결과 예제 4 4 #### #JF# #..# #..# 실행결과 3 ⌨️ 문제 풀이 과정방문처리용 리스트를 만들어 사용하니 시간초과와 메모리 초과가 떴다.</description>
    </item>
  </channel>
</rss>
